
overhead_unit_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007494  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007620  08007620  00017620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007698  08007698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080076a0  080076a0  000176a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080076a4  080076a4  000176a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000b0  20000000  080076a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  200000b0  08007758  000200b0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000314  08007758  00020314  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016ad0  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bae  00000000  00000000  00036bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001310  00000000  00000000  00039760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000011b8  00000000  00000000  0003aa70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000294e6  00000000  00000000  0003bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000172eb  00000000  00000000  0006510e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00106d24  00000000  00000000  0007c3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0018311d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000537c  00000000  00000000  00183170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007604 	.word	0x08007604

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08007604 	.word	0x08007604

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b96e 	b.w	8000df8 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468c      	mov	ip, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 8083 	bne.w	8000c4a <__udivmoddi4+0x116>
 8000b44:	428a      	cmp	r2, r1
 8000b46:	4617      	mov	r7, r2
 8000b48:	d947      	bls.n	8000bda <__udivmoddi4+0xa6>
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	b142      	cbz	r2, 8000b62 <__udivmoddi4+0x2e>
 8000b50:	f1c2 0020 	rsb	r0, r2, #32
 8000b54:	fa24 f000 	lsr.w	r0, r4, r0
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	4097      	lsls	r7, r2
 8000b5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000b60:	4094      	lsls	r4, r2
 8000b62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b66:	0c23      	lsrs	r3, r4, #16
 8000b68:	fbbc f6f8 	udiv	r6, ip, r8
 8000b6c:	fa1f fe87 	uxth.w	lr, r7
 8000b70:	fb08 c116 	mls	r1, r8, r6, ip
 8000b74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b78:	fb06 f10e 	mul.w	r1, r6, lr
 8000b7c:	4299      	cmp	r1, r3
 8000b7e:	d909      	bls.n	8000b94 <__udivmoddi4+0x60>
 8000b80:	18fb      	adds	r3, r7, r3
 8000b82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b86:	f080 8119 	bcs.w	8000dbc <__udivmoddi4+0x288>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 8116 	bls.w	8000dbc <__udivmoddi4+0x288>
 8000b90:	3e02      	subs	r6, #2
 8000b92:	443b      	add	r3, r7
 8000b94:	1a5b      	subs	r3, r3, r1
 8000b96:	b2a4      	uxth	r4, r4
 8000b98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x8c>
 8000bac:	193c      	adds	r4, r7, r4
 8000bae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb2:	f080 8105 	bcs.w	8000dc0 <__udivmoddi4+0x28c>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	f240 8102 	bls.w	8000dc0 <__udivmoddi4+0x28c>
 8000bbc:	3802      	subs	r0, #2
 8000bbe:	443c      	add	r4, r7
 8000bc0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc4:	eba4 040e 	sub.w	r4, r4, lr
 8000bc8:	2600      	movs	r6, #0
 8000bca:	b11d      	cbz	r5, 8000bd4 <__udivmoddi4+0xa0>
 8000bcc:	40d4      	lsrs	r4, r2
 8000bce:	2300      	movs	r3, #0
 8000bd0:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd4:	4631      	mov	r1, r6
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	b902      	cbnz	r2, 8000bde <__udivmoddi4+0xaa>
 8000bdc:	deff      	udf	#255	; 0xff
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	2a00      	cmp	r2, #0
 8000be4:	d150      	bne.n	8000c88 <__udivmoddi4+0x154>
 8000be6:	1bcb      	subs	r3, r1, r7
 8000be8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bec:	fa1f f887 	uxth.w	r8, r7
 8000bf0:	2601      	movs	r6, #1
 8000bf2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bf6:	0c21      	lsrs	r1, r4, #16
 8000bf8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bfc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c00:	fb08 f30c 	mul.w	r3, r8, ip
 8000c04:	428b      	cmp	r3, r1
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0xe4>
 8000c08:	1879      	adds	r1, r7, r1
 8000c0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0xe2>
 8000c10:	428b      	cmp	r3, r1
 8000c12:	f200 80e9 	bhi.w	8000de8 <__udivmoddi4+0x2b4>
 8000c16:	4684      	mov	ip, r0
 8000c18:	1ac9      	subs	r1, r1, r3
 8000c1a:	b2a3      	uxth	r3, r4
 8000c1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c28:	fb08 f800 	mul.w	r8, r8, r0
 8000c2c:	45a0      	cmp	r8, r4
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x10c>
 8000c30:	193c      	adds	r4, r7, r4
 8000c32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x10a>
 8000c38:	45a0      	cmp	r8, r4
 8000c3a:	f200 80d9 	bhi.w	8000df0 <__udivmoddi4+0x2bc>
 8000c3e:	4618      	mov	r0, r3
 8000c40:	eba4 0408 	sub.w	r4, r4, r8
 8000c44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c48:	e7bf      	b.n	8000bca <__udivmoddi4+0x96>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d909      	bls.n	8000c62 <__udivmoddi4+0x12e>
 8000c4e:	2d00      	cmp	r5, #0
 8000c50:	f000 80b1 	beq.w	8000db6 <__udivmoddi4+0x282>
 8000c54:	2600      	movs	r6, #0
 8000c56:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	4631      	mov	r1, r6
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	fab3 f683 	clz	r6, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d14a      	bne.n	8000d00 <__udivmoddi4+0x1cc>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d302      	bcc.n	8000c74 <__udivmoddi4+0x140>
 8000c6e:	4282      	cmp	r2, r0
 8000c70:	f200 80b8 	bhi.w	8000de4 <__udivmoddi4+0x2b0>
 8000c74:	1a84      	subs	r4, r0, r2
 8000c76:	eb61 0103 	sbc.w	r1, r1, r3
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	468c      	mov	ip, r1
 8000c7e:	2d00      	cmp	r5, #0
 8000c80:	d0a8      	beq.n	8000bd4 <__udivmoddi4+0xa0>
 8000c82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c86:	e7a5      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000c88:	f1c2 0320 	rsb	r3, r2, #32
 8000c8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000c90:	4097      	lsls	r7, r2
 8000c92:	fa01 f002 	lsl.w	r0, r1, r2
 8000c96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c9a:	40d9      	lsrs	r1, r3
 8000c9c:	4330      	orrs	r0, r6
 8000c9e:	0c03      	lsrs	r3, r0, #16
 8000ca0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ca4:	fa1f f887 	uxth.w	r8, r7
 8000ca8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cb0:	fb06 f108 	mul.w	r1, r6, r8
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cba:	d909      	bls.n	8000cd0 <__udivmoddi4+0x19c>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000cc2:	f080 808d 	bcs.w	8000de0 <__udivmoddi4+0x2ac>
 8000cc6:	4299      	cmp	r1, r3
 8000cc8:	f240 808a 	bls.w	8000de0 <__udivmoddi4+0x2ac>
 8000ccc:	3e02      	subs	r6, #2
 8000cce:	443b      	add	r3, r7
 8000cd0:	1a5b      	subs	r3, r3, r1
 8000cd2:	b281      	uxth	r1, r0
 8000cd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce0:	fb00 f308 	mul.w	r3, r0, r8
 8000ce4:	428b      	cmp	r3, r1
 8000ce6:	d907      	bls.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ce8:	1879      	adds	r1, r7, r1
 8000cea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cee:	d273      	bcs.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d971      	bls.n	8000dd8 <__udivmoddi4+0x2a4>
 8000cf4:	3802      	subs	r0, #2
 8000cf6:	4439      	add	r1, r7
 8000cf8:	1acb      	subs	r3, r1, r3
 8000cfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cfe:	e778      	b.n	8000bf2 <__udivmoddi4+0xbe>
 8000d00:	f1c6 0c20 	rsb	ip, r6, #32
 8000d04:	fa03 f406 	lsl.w	r4, r3, r6
 8000d08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d0c:	431c      	orrs	r4, r3
 8000d0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d12:	fa01 f306 	lsl.w	r3, r1, r6
 8000d16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d1e:	431f      	orrs	r7, r3
 8000d20:	0c3b      	lsrs	r3, r7, #16
 8000d22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d26:	fa1f f884 	uxth.w	r8, r4
 8000d2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d32:	fb09 fa08 	mul.w	sl, r9, r8
 8000d36:	458a      	cmp	sl, r1
 8000d38:	fa02 f206 	lsl.w	r2, r2, r6
 8000d3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x220>
 8000d42:	1861      	adds	r1, r4, r1
 8000d44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d48:	d248      	bcs.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4a:	458a      	cmp	sl, r1
 8000d4c:	d946      	bls.n	8000ddc <__udivmoddi4+0x2a8>
 8000d4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d52:	4421      	add	r1, r4
 8000d54:	eba1 010a 	sub.w	r1, r1, sl
 8000d58:	b2bf      	uxth	r7, r7
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d66:	fb00 f808 	mul.w	r8, r0, r8
 8000d6a:	45b8      	cmp	r8, r7
 8000d6c:	d907      	bls.n	8000d7e <__udivmoddi4+0x24a>
 8000d6e:	19e7      	adds	r7, r4, r7
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d22e      	bcs.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d76:	45b8      	cmp	r8, r7
 8000d78:	d92c      	bls.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d7a:	3802      	subs	r0, #2
 8000d7c:	4427      	add	r7, r4
 8000d7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d82:	eba7 0708 	sub.w	r7, r7, r8
 8000d86:	fba0 8902 	umull	r8, r9, r0, r2
 8000d8a:	454f      	cmp	r7, r9
 8000d8c:	46c6      	mov	lr, r8
 8000d8e:	4649      	mov	r1, r9
 8000d90:	d31a      	bcc.n	8000dc8 <__udivmoddi4+0x294>
 8000d92:	d017      	beq.n	8000dc4 <__udivmoddi4+0x290>
 8000d94:	b15d      	cbz	r5, 8000dae <__udivmoddi4+0x27a>
 8000d96:	ebb3 020e 	subs.w	r2, r3, lr
 8000d9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000d9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000da2:	40f2      	lsrs	r2, r6
 8000da4:	ea4c 0202 	orr.w	r2, ip, r2
 8000da8:	40f7      	lsrs	r7, r6
 8000daa:	e9c5 2700 	strd	r2, r7, [r5]
 8000dae:	2600      	movs	r6, #0
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	462e      	mov	r6, r5
 8000db8:	4628      	mov	r0, r5
 8000dba:	e70b      	b.n	8000bd4 <__udivmoddi4+0xa0>
 8000dbc:	4606      	mov	r6, r0
 8000dbe:	e6e9      	b.n	8000b94 <__udivmoddi4+0x60>
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	e6fd      	b.n	8000bc0 <__udivmoddi4+0x8c>
 8000dc4:	4543      	cmp	r3, r8
 8000dc6:	d2e5      	bcs.n	8000d94 <__udivmoddi4+0x260>
 8000dc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000dcc:	eb69 0104 	sbc.w	r1, r9, r4
 8000dd0:	3801      	subs	r0, #1
 8000dd2:	e7df      	b.n	8000d94 <__udivmoddi4+0x260>
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	e7d2      	b.n	8000d7e <__udivmoddi4+0x24a>
 8000dd8:	4660      	mov	r0, ip
 8000dda:	e78d      	b.n	8000cf8 <__udivmoddi4+0x1c4>
 8000ddc:	4681      	mov	r9, r0
 8000dde:	e7b9      	b.n	8000d54 <__udivmoddi4+0x220>
 8000de0:	4666      	mov	r6, ip
 8000de2:	e775      	b.n	8000cd0 <__udivmoddi4+0x19c>
 8000de4:	4630      	mov	r0, r6
 8000de6:	e74a      	b.n	8000c7e <__udivmoddi4+0x14a>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	4439      	add	r1, r7
 8000dee:	e713      	b.n	8000c18 <__udivmoddi4+0xe4>
 8000df0:	3802      	subs	r0, #2
 8000df2:	443c      	add	r4, r7
 8000df4:	e724      	b.n	8000c40 <__udivmoddi4+0x10c>
 8000df6:	bf00      	nop

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e02:	f107 031c 	add.w	r3, r7, #28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e20:	4a3e      	ldr	r2, [pc, #248]	; (8000f1c <MX_ADC1_Init+0x120>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 8000e24:	4b3c      	ldr	r3, [pc, #240]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e26:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b3a      	ldr	r3, [pc, #232]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e32:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	4b36      	ldr	r3, [pc, #216]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e44:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e4a:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000e50:	4b31      	ldr	r3, [pc, #196]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e52:	2203      	movs	r2, #3
 8000e54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5e:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e6a:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e78:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000e7a:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e82:	4825      	ldr	r0, [pc, #148]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e84:	f001 faf8 	bl	8002478 <HAL_ADC_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8000e8e:	f000 fd8f 	bl	80019b0 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	481e      	ldr	r0, [pc, #120]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000e9e:	f002 fa13 	bl	80032c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000ea8:	f000 fd82 	bl	80019b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <MX_ADC1_Init+0x124>)
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb8:	237f      	movs	r3, #127	; 0x7f
 8000eba:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ebc:	2304      	movs	r3, #4
 8000ebe:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000eca:	f001 fcfb 	bl	80028c4 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000ed4:	f000 fd6c 	bl	80019b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_ADC1_Init+0x128>)
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000edc:	230c      	movs	r3, #12
 8000ede:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480c      	ldr	r0, [pc, #48]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000ee6:	f001 fced 	bl	80028c4 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ef0:	f000 fd5e 	bl	80019b0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_ADC1_Init+0x12c>)
 8000ef6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ef8:	2312      	movs	r3, #18
 8000efa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000efc:	1d3b      	adds	r3, r7, #4
 8000efe:	4619      	mov	r1, r3
 8000f00:	4805      	ldr	r0, [pc, #20]	; (8000f18 <MX_ADC1_Init+0x11c>)
 8000f02:	f001 fcdf 	bl	80028c4 <HAL_ADC_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 8000f0c:	f000 fd50 	bl	80019b0 <Error_Handler>
  }

}
 8000f10:	bf00      	nop
 8000f12:	3728      	adds	r7, #40	; 0x28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	2000014c 	.word	0x2000014c
 8000f1c:	50040000 	.word	0x50040000
 8000f20:	04300002 	.word	0x04300002
 8000f24:	08600004 	.word	0x08600004
 8000f28:	3ef08000 	.word	0x3ef08000

08000f2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a37      	ldr	r2, [pc, #220]	; (8001028 <HAL_ADC_MspInit+0xfc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d167      	bne.n	800101e <HAL_ADC_MspInit+0xf2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f4e:	4b37      	ldr	r3, [pc, #220]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f52:	4a36      	ldr	r2, [pc, #216]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5a:	4b34      	ldr	r3, [pc, #208]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b31      	ldr	r3, [pc, #196]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a30      	ldr	r2, [pc, #192]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b2e      	ldr	r3, [pc, #184]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	4b2b      	ldr	r3, [pc, #172]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a2a      	ldr	r2, [pc, #168]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f84:	f043 0302 	orr.w	r3, r3, #2
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b28      	ldr	r3, [pc, #160]	; (800102c <HAL_ADC_MspInit+0x100>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = stick_y_Pin|stick_x_Pin;
 8000f96:	2303      	movs	r3, #3
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f9a:	230b      	movs	r3, #11
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	f107 0314 	add.w	r3, r7, #20
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <HAL_ADC_MspInit+0x104>)
 8000faa:	f002 fd43 	bl	8003a34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481c      	ldr	r0, [pc, #112]	; (8001034 <HAL_ADC_MspInit+0x108>)
 8000fc2:	f002 fd37 	bl	8003a34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	; (800103c <HAL_ADC_MspInit+0x110>)
 8000fca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fec:	4b12      	ldr	r3, [pc, #72]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000ff4:	4b10      	ldr	r3, [pc, #64]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000ffa:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8000ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001000:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001002:	480d      	ldr	r0, [pc, #52]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8001004:	f002 fb1e 	bl	8003644 <HAL_DMA_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <HAL_ADC_MspInit+0xe6>
    {
      Error_Handler();
 800100e:	f000 fccf 	bl	80019b0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a08      	ldr	r2, [pc, #32]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 8001016:	64da      	str	r2, [r3, #76]	; 0x4c
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_ADC_MspInit+0x10c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	; 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	50040000 	.word	0x50040000
 800102c:	40021000 	.word	0x40021000
 8001030:	48000800 	.word	0x48000800
 8001034:	48000400 	.word	0x48000400
 8001038:	200001b0 	.word	0x200001b0
 800103c:	40020008 	.word	0x40020008

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_DMA_Init+0x38>)
 8001048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <MX_DMA_Init+0x38>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6493      	str	r3, [r2, #72]	; 0x48
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_DMA_Init+0x38>)
 8001054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	200b      	movs	r0, #11
 8001064:	f002 fab7 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001068:	200b      	movs	r0, #11
 800106a:	f002 fad0 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001092:	4b36      	ldr	r3, [pc, #216]	; (800116c <MX_GPIO_Init+0xf0>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a35      	ldr	r2, [pc, #212]	; (800116c <MX_GPIO_Init+0xf0>)
 8001098:	f043 0304 	orr.w	r3, r3, #4
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b33      	ldr	r3, [pc, #204]	; (800116c <MX_GPIO_Init+0xf0>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0304 	and.w	r3, r3, #4
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <MX_GPIO_Init+0xf0>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a2f      	ldr	r2, [pc, #188]	; (800116c <MX_GPIO_Init+0xf0>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <MX_GPIO_Init+0xf0>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	4b2a      	ldr	r3, [pc, #168]	; (800116c <MX_GPIO_Init+0xf0>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	4a29      	ldr	r2, [pc, #164]	; (800116c <MX_GPIO_Init+0xf0>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <MX_GPIO_Init+0xf0>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <MX_GPIO_Init+0xf0>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	4a23      	ldr	r2, [pc, #140]	; (800116c <MX_GPIO_Init+0xf0>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <MX_GPIO_Init+0xf0>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R1_Pin|LED_R3_Pin|LED_R2_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f002 fe44 	bl	8003d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_R7_Pin|LED_R6_Pin|LED_R5_Pin|LED_R4_Pin
 8001100:	2200      	movs	r2, #0
 8001102:	f64f 0106 	movw	r1, #63494	; 0xf806
 8001106:	481a      	ldr	r0, [pc, #104]	; (8001170 <MX_GPIO_Init+0xf4>)
 8001108:	f002 fe3e 	bl	8003d88 <HAL_GPIO_WritePin>
                          |LED_R10_Pin|LED_R9_Pin|LED_R8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001112:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_GPIO_Init+0xf8>)
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	4815      	ldr	r0, [pc, #84]	; (8001178 <MX_GPIO_Init+0xfc>)
 8001122:	f002 fc87 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R1_Pin|LED_R3_Pin|LED_R2_Pin;
 8001126:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800112c:	2301      	movs	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	4619      	mov	r1, r3
 800113e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001142:	f002 fc77 	bl	8003a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_R7_Pin|LED_R6_Pin|LED_R5_Pin|LED_R4_Pin
 8001146:	f64f 0306 	movw	r3, #63494	; 0xf806
 800114a:	617b      	str	r3, [r7, #20]
                          |LED_R10_Pin|LED_R9_Pin|LED_R8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001154:	2303      	movs	r3, #3
 8001156:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <MX_GPIO_Init+0xf4>)
 8001160:	f002 fc68 	bl	8003a34 <HAL_GPIO_Init>

}
 8001164:	bf00      	nop
 8001166:	3728      	adds	r7, #40	; 0x28
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40021000 	.word	0x40021000
 8001170:	48000400 	.word	0x48000400
 8001174:	10210000 	.word	0x10210000
 8001178:	48000800 	.word	0x48000800

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001182:	f000 ff03 	bl	8001f8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 f89d 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f7ff ff77 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 800118e:	f7ff ff57 	bl	8001040 <MX_DMA_Init>
  MX_TIM1_Init();
 8001192:	f000 fd05 	bl	8001ba0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001196:	f000 fdc9 	bl	8001d2c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800119a:	f000 fe85 	bl	8001ea8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800119e:	f7ff fe2d 	bl	8000dfc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80011a2:	4843      	ldr	r0, [pc, #268]	; (80012b0 <main+0x134>)
 80011a4:	f004 f96c 	bl	8005480 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4842      	ldr	r0, [pc, #264]	; (80012b4 <main+0x138>)
 80011ac:	f004 fa3a 	bl	8005624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4840      	ldr	r0, [pc, #256]	; (80012b4 <main+0x138>)
 80011b4:	f004 fa36 	bl	8005624 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80011b8:	2108      	movs	r1, #8
 80011ba:	483e      	ldr	r0, [pc, #248]	; (80012b4 <main+0x138>)
 80011bc:	f004 fa32 	bl	8005624 <HAL_TIM_PWM_Start>


  htim1.Instance->CCR1 = 0;
 80011c0:	4b3c      	ldr	r3, [pc, #240]	; (80012b4 <main+0x138>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	635a      	str	r2, [r3, #52]	; 0x34
  htim1.Instance->CCR2 = 0;
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <main+0x138>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2200      	movs	r2, #0
 80011ce:	639a      	str	r2, [r3, #56]	; 0x38
  htim1.Instance->CCR3 = 0;
 80011d0:	4b38      	ldr	r3, [pc, #224]	; (80012b4 <main+0x138>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_data, 3);
 80011d8:	2203      	movs	r2, #3
 80011da:	4937      	ldr	r1, [pc, #220]	; (80012b8 <main+0x13c>)
 80011dc:	4837      	ldr	r0, [pc, #220]	; (80012bc <main+0x140>)
 80011de:	f001 fa9f 	bl	8002720 <HAL_ADC_Start_DMA>

  HAL_Delay(200);
 80011e2:	20c8      	movs	r0, #200	; 0xc8
 80011e4:	f000 ff4e 	bl	8002084 <HAL_Delay>


  for(int i = 0; i < 3; i++){
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	e028      	b.n	8001240 <main+0xc4>
	  for(int j = 0; j < 10; j++){
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
 80011f2:	e01f      	b.n	8001234 <main+0xb8>
		  led_matrix[i][j] = 9990;
 80011f4:	4932      	ldr	r1, [pc, #200]	; (80012c0 <main+0x144>)
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	f242 7206 	movw	r2, #9990	; 0x2706
 8001208:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		  HAL_Delay(10);
 800120c:	200a      	movs	r0, #10
 800120e:	f000 ff39 	bl	8002084 <HAL_Delay>
  		  led_matrix[i][j] = 0;
 8001212:	492b      	ldr	r1, [pc, #172]	; (80012c0 <main+0x144>)
 8001214:	68fa      	ldr	r2, [r7, #12]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	4413      	add	r3, r2
 8001222:	2200      	movs	r2, #0
 8001224:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  		  HAL_Delay(10);
 8001228:	200a      	movs	r0, #10
 800122a:	f000 ff2b 	bl	8002084 <HAL_Delay>
	  for(int j = 0; j < 10; j++){
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3301      	adds	r3, #1
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	2b09      	cmp	r3, #9
 8001238:	dddc      	ble.n	80011f4 <main+0x78>
  for(int i = 0; i < 3; i++){
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b02      	cmp	r3, #2
 8001244:	ddd3      	ble.n	80011ee <main+0x72>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t stick_x 	= 0;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
	  uint8_t stick_y 	= 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71bb      	strb	r3, [r7, #6]
	  float   spot_size = 0;
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	603b      	str	r3, [r7, #0]

	  get_stick_position(adc_data[0], adc_data[1], &stick_x, &stick_y);
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <main+0x13c>)
 8001256:	8818      	ldrh	r0, [r3, #0]
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <main+0x13c>)
 800125a:	8859      	ldrh	r1, [r3, #2]
 800125c:	1dbb      	adds	r3, r7, #6
 800125e:	1dfa      	adds	r2, r7, #7
 8001260:	f000 f901 	bl	8001466 <get_stick_position>

	  get_led_spot_size(adc_data[2], &spot_size);
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <main+0x13c>)
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	463a      	mov	r2, r7
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f000 f92f 	bl	80014d0 <get_led_spot_size>

	  calculate_led_matrix(stick_x, stick_y, spot_size);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	79ba      	ldrb	r2, [r7, #6]
 8001276:	edd7 7a00 	vldr	s15, [r7]
 800127a:	eeb0 0a67 	vmov.f32	s0, s15
 800127e:	4611      	mov	r1, r2
 8001280:	4618      	mov	r0, r3
 8001282:	f000 f941 	bl	8001508 <calculate_led_matrix>

	  HAL_Delay(2);
 8001286:	2002      	movs	r0, #2
 8001288:	f000 fefc 	bl	8002084 <HAL_Delay>

	  fill_new_matrix();
 800128c:	f000 fb5a 	bl	8001944 <fill_new_matrix>

	  htim1.Instance->CCR1 = 9990;
 8001290:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <main+0x138>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f242 7206 	movw	r2, #9990	; 0x2706
 8001298:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = 0;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <main+0x138>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance->CCR3 = 9990;
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <main+0x138>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f242 7206 	movw	r2, #9990	; 0x2706
 80012aa:	63da      	str	r2, [r3, #60]	; 0x3c
  {
 80012ac:	e7cb      	b.n	8001246 <main+0xca>
 80012ae:	bf00      	nop
 80012b0:	20000244 	.word	0x20000244
 80012b4:	200001f8 	.word	0x200001f8
 80012b8:	20000144 	.word	0x20000144
 80012bc:	2000014c 	.word	0x2000014c
 80012c0:	20000108 	.word	0x20000108

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0b8      	sub	sp, #224	; 0xe0
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ce:	2244      	movs	r2, #68	; 0x44
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 ffb6 	bl	8007244 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	463b      	mov	r3, r7
 80012ea:	2288      	movs	r2, #136	; 0x88
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f005 ffa8 	bl	8007244 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001302:	2310      	movs	r3, #16
 8001304:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001308:	2302      	movs	r3, #2
 800130a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001314:	2301      	movs	r3, #1
 8001316:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800131a:	230a      	movs	r3, #10
 800131c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001320:	2307      	movs	r3, #7
 8001322:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001332:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001336:	4618      	mov	r0, r3
 8001338:	f002 fda2 	bl	8003e80 <HAL_RCC_OscConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001342:	f000 fb35 	bl	80019b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001346:	230f      	movs	r3, #15
 8001348:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800134c:	2303      	movs	r3, #3
 800134e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001352:	2300      	movs	r3, #0
 8001354:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001364:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8001368:	2104      	movs	r1, #4
 800136a:	4618      	mov	r0, r3
 800136c:	f003 f96e 	bl	800464c <HAL_RCC_ClockConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001376:	f000 fb1b 	bl	80019b0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 800137a:	f244 0302 	movw	r3, #16386	; 0x4002
 800137e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001380:	2300      	movs	r3, #0
 8001382:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001384:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001388:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800138a:	2302      	movs	r3, #2
 800138c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800138e:	2301      	movs	r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001392:	2308      	movs	r3, #8
 8001394:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001396:	2307      	movs	r3, #7
 8001398:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800139a:	2302      	movs	r3, #2
 800139c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80013a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013a6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f003 fb54 	bl	8004a58 <HAL_RCCEx_PeriphCLKConfig>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80013b6:	f000 fafb 	bl	80019b0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013be:	f002 fd09 	bl	8003dd4 <HAL_PWREx_ControlVoltageScaling>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x108>
  {
    Error_Handler();
 80013c8:	f000 faf2 	bl	80019b0 <Error_Handler>
  }
}
 80013cc:	bf00      	nop
 80013ce:	37e0      	adds	r7, #224	; 0xe0
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <map>:

/* USER CODE BEGIN 4 */

long map(long in_value, long in_min, long in_max, long out_min, long out_max){
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]

	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	1a8a      	subs	r2, r1, r2
 80013ee:	fb02 f203 	mul.w	r2, r2, r3
 80013f2:	6879      	ldr	r1, [r7, #4]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1acb      	subs	r3, r1, r3
 80013f8:	fb92 f2f3 	sdiv	r2, r2, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	4413      	add	r3, r2

}
 8001400:	4618      	mov	r0, r3
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <map_float>:
//-------------------------


float map_float(long in_value, long in_min, long in_max, float out_min, float out_max){
 800140c:	b480      	push	{r7}
 800140e:	b087      	sub	sp, #28
 8001410:	af00      	add	r7, sp, #0
 8001412:	6178      	str	r0, [r7, #20]
 8001414:	6139      	str	r1, [r7, #16]
 8001416:	60fa      	str	r2, [r7, #12]
 8001418:	ed87 0a02 	vstr	s0, [r7, #8]
 800141c:	edc7 0a01 	vstr	s1, [r7, #4]

	return (in_value - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800142e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001432:	edd7 7a02 	vldr	s15, [r7, #8]
 8001436:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800143a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001450:	edd7 7a02 	vldr	s15, [r7, #8]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15

}
 8001458:	eeb0 0a67 	vmov.f32	s0, s15
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <get_stick_position>:
//-------------------------


void get_stick_position(uint16_t adc_x, uint16_t adc_y, uint8_t *pos_x, uint8_t *pos_y){
 8001466:	b580      	push	{r7, lr}
 8001468:	b086      	sub	sp, #24
 800146a:	af02      	add	r7, sp, #8
 800146c:	60ba      	str	r2, [r7, #8]
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4603      	mov	r3, r0
 8001472:	81fb      	strh	r3, [r7, #14]
 8001474:	460b      	mov	r3, r1
 8001476:	81bb      	strh	r3, [r7, #12]

	*pos_x = map(adc_x, 0, 4095, 0, 10);
 8001478:	89f8      	ldrh	r0, [r7, #14]
 800147a:	230a      	movs	r3, #10
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001484:	2100      	movs	r1, #0
 8001486:	f7ff ffa5 	bl	80013d4 <map>
 800148a:	4603      	mov	r3, r0
 800148c:	b2da      	uxtb	r2, r3
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	701a      	strb	r2, [r3, #0]
	//*pos_y = map(adc_y, 0, 4050, 0, 2);

	if(adc_y >= 2700) 	  				   *pos_y = 2;
 8001492:	89bb      	ldrh	r3, [r7, #12]
 8001494:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001498:	4293      	cmp	r3, r2
 800149a:	d903      	bls.n	80014a4 <get_stick_position+0x3e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2202      	movs	r2, #2
 80014a0:	701a      	strb	r2, [r3, #0]
	else if(adc_y < 2700 && adc_y >= 1350) *pos_y = 1;
	else 								   *pos_y = 0;
}
 80014a2:	e010      	b.n	80014c6 <get_stick_position+0x60>
	else if(adc_y < 2700 && adc_y >= 1350) *pos_y = 1;
 80014a4:	89bb      	ldrh	r3, [r7, #12]
 80014a6:	f640 228b 	movw	r2, #2699	; 0xa8b
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d808      	bhi.n	80014c0 <get_stick_position+0x5a>
 80014ae:	89bb      	ldrh	r3, [r7, #12]
 80014b0:	f240 5245 	movw	r2, #1349	; 0x545
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d903      	bls.n	80014c0 <get_stick_position+0x5a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2201      	movs	r2, #1
 80014bc:	701a      	strb	r2, [r3, #0]
}
 80014be:	e002      	b.n	80014c6 <get_stick_position+0x60>
	else 								   *pos_y = 0;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <get_led_spot_size>:
//-------------------------


void get_led_spot_size(uint16_t adc_spot, float *led_spot_size){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	6039      	str	r1, [r7, #0]
 80014da:	80fb      	strh	r3, [r7, #6]

	*led_spot_size = map_float(adc_spot, 0, 4095, 0.1, 7);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	eef1 0a0c 	vmov.f32	s1, #28	; 0x40e00000  7.0
 80014e2:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8001504 <get_led_spot_size+0x34>
 80014e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff8d 	bl	800140c <map_float>
 80014f2:	eef0 7a40 	vmov.f32	s15, s0
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	edc3 7a00 	vstr	s15, [r3]
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	3dcccccd 	.word	0x3dcccccd

08001508 <calculate_led_matrix>:
//-------------------------


void calculate_led_matrix(uint8_t pos_x, uint8_t pos_y, float spot_size){
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b090      	sub	sp, #64	; 0x40
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	460a      	mov	r2, r1
 8001512:	ed87 0a00 	vstr	s0, [r7]
 8001516:	71fb      	strb	r3, [r7, #7]
 8001518:	4613      	mov	r3, r2
 800151a:	71bb      	strb	r3, [r7, #6]

	#define led_diffusion 	1.8
	uint16_t led_max_bright = 9990; // (gets from TIM1 PWM value)
 800151c:	f242 7306 	movw	r3, #9990	; 0x2706
 8001520:	827b      	strh	r3, [r7, #18]
	uint8_t init_x = pos_x;
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	747b      	strb	r3, [r7, #17]
	uint8_t init_y = pos_y;
 8001526:	79bb      	ldrb	r3, [r7, #6]
 8001528:	743b      	strb	r3, [r7, #16]

	uint16_t result = 0.0;
 800152a:	2300      	movs	r3, #0
 800152c:	81fb      	strh	r3, [r7, #14]
	uint8_t counter_x = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t counter_y = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	// Left-to-right side (relatively to center)
	for(int i = init_x; i >= 0; i--){
 800153a:	7c7b      	ldrb	r3, [r7, #17]
 800153c:	63bb      	str	r3, [r7, #56]	; 0x38
 800153e:	e041      	b.n	80015c4 <calculate_led_matrix+0xbc>
		result = led_max_bright * exp(-counter_x*spot_size);
 8001540:	8a7b      	ldrh	r3, [r7, #18]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff92 	bl	800046c <__aeabi_i2d>
 8001548:	4604      	mov	r4, r0
 800154a:	460d      	mov	r5, r1
 800154c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001550:	425b      	negs	r3, r3
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800155a:	edd7 7a00 	vldr	s15, [r7]
 800155e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001562:	ee17 0a90 	vmov	r0, s15
 8001566:	f7fe ff93 	bl	8000490 <__aeabi_f2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	ec43 2b10 	vmov	d0, r2, r3
 8001572:	f005 fe71 	bl	8007258 <exp>
 8001576:	ec53 2b10 	vmov	r2, r3, d0
 800157a:	4620      	mov	r0, r4
 800157c:	4629      	mov	r1, r5
 800157e:	f7fe ffdf 	bl	8000540 <__aeabi_dmul>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4610      	mov	r0, r2
 8001588:	4619      	mov	r1, r3
 800158a:	f7ff fa9b 	bl	8000ac4 <__aeabi_d2uiz>
 800158e:	4603      	mov	r3, r0
 8001590:	81fb      	strh	r3, [r7, #14]
		calculation_matrix[0][i] = result;
 8001592:	49c0      	ldr	r1, [pc, #768]	; (8001894 <calculate_led_matrix+0x38c>)
 8001594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		calculation_matrix[1][i] = result;
 800159c:	49bd      	ldr	r1, [pc, #756]	; (8001894 <calculate_led_matrix+0x38c>)
 800159e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015a0:	330a      	adds	r3, #10
 80015a2:	89fa      	ldrh	r2, [r7, #14]
 80015a4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    calculation_matrix[2][i] = result;
 80015a8:	49ba      	ldr	r1, [pc, #744]	; (8001894 <calculate_led_matrix+0x38c>)
 80015aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ac:	3314      	adds	r3, #20
 80015ae:	89fa      	ldrh	r2, [r7, #14]
 80015b0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	    counter_x++;
 80015b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015b8:	3301      	adds	r3, #1
 80015ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(int i = init_x; i >= 0; i--){
 80015be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c0:	3b01      	subs	r3, #1
 80015c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80015c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	daba      	bge.n	8001540 <calculate_led_matrix+0x38>
	  }

	counter_x = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	// Right-to-left side (relatively to center)
	for(uint8_t i = init_x; i <= 9; i++){
 80015d0:	7c7b      	ldrb	r3, [r7, #17]
 80015d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80015d6:	e046      	b.n	8001666 <calculate_led_matrix+0x15e>
		result = led_max_bright * exp(-counter_x*spot_size);
 80015d8:	8a7b      	ldrh	r3, [r7, #18]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff46 	bl	800046c <__aeabi_i2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015e8:	425b      	negs	r3, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	edd7 7a00 	vldr	s15, [r7]
 80015f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fa:	ee17 0a90 	vmov	r0, s15
 80015fe:	f7fe ff47 	bl	8000490 <__aeabi_f2d>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	ec43 2b10 	vmov	d0, r2, r3
 800160a:	f005 fe25 	bl	8007258 <exp>
 800160e:	ec53 2b10 	vmov	r2, r3, d0
 8001612:	4620      	mov	r0, r4
 8001614:	4629      	mov	r1, r5
 8001616:	f7fe ff93 	bl	8000540 <__aeabi_dmul>
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4610      	mov	r0, r2
 8001620:	4619      	mov	r1, r3
 8001622:	f7ff fa4f 	bl	8000ac4 <__aeabi_d2uiz>
 8001626:	4603      	mov	r3, r0
 8001628:	81fb      	strh	r3, [r7, #14]
		calculation_matrix[0][i] = result;
 800162a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800162e:	4999      	ldr	r1, [pc, #612]	; (8001894 <calculate_led_matrix+0x38c>)
 8001630:	89fa      	ldrh	r2, [r7, #14]
 8001632:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		calculation_matrix[1][i] = result;
 8001636:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800163a:	4996      	ldr	r1, [pc, #600]	; (8001894 <calculate_led_matrix+0x38c>)
 800163c:	330a      	adds	r3, #10
 800163e:	89fa      	ldrh	r2, [r7, #14]
 8001640:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		calculation_matrix[2][i] = result;
 8001644:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001648:	4992      	ldr	r1, [pc, #584]	; (8001894 <calculate_led_matrix+0x38c>)
 800164a:	3314      	adds	r3, #20
 800164c:	89fa      	ldrh	r2, [r7, #14]
 800164e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		counter_x++;
 8001652:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001656:	3301      	adds	r3, #1
 8001658:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(uint8_t i = init_x; i <= 9; i++){
 800165c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001660:	3301      	adds	r3, #1
 8001662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001666:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800166a:	2b09      	cmp	r3, #9
 800166c:	d9b4      	bls.n	80015d8 <calculate_led_matrix+0xd0>
	}

	//return;

	switch(init_y){
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	2b02      	cmp	r3, #2
 8001672:	f000 8109 	beq.w	8001888 <calculate_led_matrix+0x380>
 8001676:	2b02      	cmp	r3, #2
 8001678:	f300 815d 	bgt.w	8001936 <calculate_led_matrix+0x42e>
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <calculate_led_matrix+0x17e>
 8001680:	2b01      	cmp	r3, #1
 8001682:	d055      	beq.n	8001730 <calculate_led_matrix+0x228>
			}
			counter_y++;
		  }
		  break;
	  }
}
 8001684:	e157      	b.n	8001936 <calculate_led_matrix+0x42e>
		  for(int i = init_y; i <= 2; i++){
 8001686:	7c3b      	ldrb	r3, [r7, #16]
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
 800168a:	e04d      	b.n	8001728 <calculate_led_matrix+0x220>
			for(int j = 0; j <= 9; j++){
 800168c:	2300      	movs	r3, #0
 800168e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001690:	e03f      	b.n	8001712 <calculate_led_matrix+0x20a>
				calculation_matrix[i][j] = calculation_matrix[i][j] * exp(-counter_y*spot_size);
 8001692:	4980      	ldr	r1, [pc, #512]	; (8001894 <calculate_led_matrix+0x38c>)
 8001694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a0:	4413      	add	r3, r2
 80016a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe fee0 	bl	800046c <__aeabi_i2d>
 80016ac:	4604      	mov	r4, r0
 80016ae:	460d      	mov	r5, r1
 80016b0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80016b4:	425b      	negs	r3, r3
 80016b6:	ee07 3a90 	vmov	s15, r3
 80016ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016be:	edd7 7a00 	vldr	s15, [r7]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	ee17 0a90 	vmov	r0, s15
 80016ca:	f7fe fee1 	bl	8000490 <__aeabi_f2d>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	ec43 2b10 	vmov	d0, r2, r3
 80016d6:	f005 fdbf 	bl	8007258 <exp>
 80016da:	ec53 2b10 	vmov	r2, r3, d0
 80016de:	4620      	mov	r0, r4
 80016e0:	4629      	mov	r1, r5
 80016e2:	f7fe ff2d 	bl	8000540 <__aeabi_dmul>
 80016e6:	4602      	mov	r2, r0
 80016e8:	460b      	mov	r3, r1
 80016ea:	4610      	mov	r0, r2
 80016ec:	4619      	mov	r1, r3
 80016ee:	f7ff f9e9 	bl	8000ac4 <__aeabi_d2uiz>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b298      	uxth	r0, r3
 80016f6:	4967      	ldr	r1, [pc, #412]	; (8001894 <calculate_led_matrix+0x38c>)
 80016f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001704:	4413      	add	r3, r2
 8001706:	4602      	mov	r2, r0
 8001708:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j <= 9; j++){
 800170c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170e:	3301      	adds	r3, #1
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001714:	2b09      	cmp	r3, #9
 8001716:	ddbc      	ble.n	8001692 <calculate_led_matrix+0x18a>
			counter_y++;
 8001718:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800171c:	3301      	adds	r3, #1
 800171e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  for(int i = init_y; i <= 2; i++){
 8001722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001724:	3301      	adds	r3, #1
 8001726:	633b      	str	r3, [r7, #48]	; 0x30
 8001728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800172a:	2b02      	cmp	r3, #2
 800172c:	ddae      	ble.n	800168c <calculate_led_matrix+0x184>
		  break;
 800172e:	e102      	b.n	8001936 <calculate_led_matrix+0x42e>
		  for(int i = init_y; i >= 0; i--){
 8001730:	7c3b      	ldrb	r3, [r7, #16]
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
 8001734:	e04d      	b.n	80017d2 <calculate_led_matrix+0x2ca>
			for(int j = 0; j <= 9; j++){
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e03f      	b.n	80017bc <calculate_led_matrix+0x2b4>
				calculation_matrix[i][j] = calculation_matrix[i][j] * exp(-counter_y*spot_size);
 800173c:	4955      	ldr	r1, [pc, #340]	; (8001894 <calculate_led_matrix+0x38c>)
 800173e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001740:	4613      	mov	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800174a:	4413      	add	r3, r2
 800174c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fe8b 	bl	800046c <__aeabi_i2d>
 8001756:	4604      	mov	r4, r0
 8001758:	460d      	mov	r5, r1
 800175a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800175e:	425b      	negs	r3, r3
 8001760:	ee07 3a90 	vmov	s15, r3
 8001764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001768:	edd7 7a00 	vldr	s15, [r7]
 800176c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001770:	ee17 0a90 	vmov	r0, s15
 8001774:	f7fe fe8c 	bl	8000490 <__aeabi_f2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	ec43 2b10 	vmov	d0, r2, r3
 8001780:	f005 fd6a 	bl	8007258 <exp>
 8001784:	ec53 2b10 	vmov	r2, r3, d0
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fed8 	bl	8000540 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f994 	bl	8000ac4 <__aeabi_d2uiz>
 800179c:	4603      	mov	r3, r0
 800179e:	b298      	uxth	r0, r3
 80017a0:	493c      	ldr	r1, [pc, #240]	; (8001894 <calculate_led_matrix+0x38c>)
 80017a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ae:	4413      	add	r3, r2
 80017b0:	4602      	mov	r2, r0
 80017b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j <= 9; j++){
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	3301      	adds	r3, #1
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	2b09      	cmp	r3, #9
 80017c0:	ddbc      	ble.n	800173c <calculate_led_matrix+0x234>
			counter_y++;
 80017c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80017c6:	3301      	adds	r3, #1
 80017c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  for(int i = init_y; i >= 0; i--){
 80017cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ce:	3b01      	subs	r3, #1
 80017d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80017d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	daae      	bge.n	8001736 <calculate_led_matrix+0x22e>
		  counter_y = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  for(int i = init_y; i <= 2; i++){
 80017de:	7c3b      	ldrb	r3, [r7, #16]
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	e04d      	b.n	8001880 <calculate_led_matrix+0x378>
			for(int j = 0; j <= 9; j++){
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	e03f      	b.n	800186a <calculate_led_matrix+0x362>
				calculation_matrix[i][j] = calculation_matrix[i][j] * exp(-counter_y*spot_size);
 80017ea:	492a      	ldr	r1, [pc, #168]	; (8001894 <calculate_led_matrix+0x38c>)
 80017ec:	6a3a      	ldr	r2, [r7, #32]
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe34 	bl	800046c <__aeabi_i2d>
 8001804:	4604      	mov	r4, r0
 8001806:	460d      	mov	r5, r1
 8001808:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800180c:	425b      	negs	r3, r3
 800180e:	ee07 3a90 	vmov	s15, r3
 8001812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001816:	edd7 7a00 	vldr	s15, [r7]
 800181a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe fe35 	bl	8000490 <__aeabi_f2d>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ec43 2b10 	vmov	d0, r2, r3
 800182e:	f005 fd13 	bl	8007258 <exp>
 8001832:	ec53 2b10 	vmov	r2, r3, d0
 8001836:	4620      	mov	r0, r4
 8001838:	4629      	mov	r1, r5
 800183a:	f7fe fe81 	bl	8000540 <__aeabi_dmul>
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4610      	mov	r0, r2
 8001844:	4619      	mov	r1, r3
 8001846:	f7ff f93d 	bl	8000ac4 <__aeabi_d2uiz>
 800184a:	4603      	mov	r3, r0
 800184c:	b298      	uxth	r0, r3
 800184e:	4911      	ldr	r1, [pc, #68]	; (8001894 <calculate_led_matrix+0x38c>)
 8001850:	6a3a      	ldr	r2, [r7, #32]
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4413      	add	r3, r2
 800185e:	4602      	mov	r2, r0
 8001860:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j <= 9; j++){
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	3301      	adds	r3, #1
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2b09      	cmp	r3, #9
 800186e:	ddbc      	ble.n	80017ea <calculate_led_matrix+0x2e2>
			counter_y++;
 8001870:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001874:	3301      	adds	r3, #1
 8001876:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  for(int i = init_y; i <= 2; i++){
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	3301      	adds	r3, #1
 800187e:	623b      	str	r3, [r7, #32]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	2b02      	cmp	r3, #2
 8001884:	ddae      	ble.n	80017e4 <calculate_led_matrix+0x2dc>
		  break;
 8001886:	e056      	b.n	8001936 <calculate_led_matrix+0x42e>
		  for(int i = init_y; i >= 0; i--){
 8001888:	7c3b      	ldrb	r3, [r7, #16]
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	e04f      	b.n	800192e <calculate_led_matrix+0x426>
			for(int j = 0; j <= 9; j++){
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	e041      	b.n	8001918 <calculate_led_matrix+0x410>
 8001894:	200000cc 	.word	0x200000cc
				calculation_matrix[i][j] = calculation_matrix[i][j] * exp(-counter_y*spot_size);
 8001898:	4929      	ldr	r1, [pc, #164]	; (8001940 <calculate_led_matrix+0x438>)
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4613      	mov	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	4413      	add	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	4413      	add	r3, r2
 80018a8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe fddd 	bl	800046c <__aeabi_i2d>
 80018b2:	4604      	mov	r4, r0
 80018b4:	460d      	mov	r5, r1
 80018b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018ba:	425b      	negs	r3, r3
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c4:	edd7 7a00 	vldr	s15, [r7]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	ee17 0a90 	vmov	r0, s15
 80018d0:	f7fe fdde 	bl	8000490 <__aeabi_f2d>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	ec43 2b10 	vmov	d0, r2, r3
 80018dc:	f005 fcbc 	bl	8007258 <exp>
 80018e0:	ec53 2b10 	vmov	r2, r3, d0
 80018e4:	4620      	mov	r0, r4
 80018e6:	4629      	mov	r1, r5
 80018e8:	f7fe fe2a 	bl	8000540 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f8e6 	bl	8000ac4 <__aeabi_d2uiz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	b298      	uxth	r0, r3
 80018fc:	4910      	ldr	r1, [pc, #64]	; (8001940 <calculate_led_matrix+0x438>)
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4613      	mov	r3, r2
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	4413      	add	r3, r2
 800190c:	4602      	mov	r2, r0
 800190e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for(int j = 0; j <= 9; j++){
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b09      	cmp	r3, #9
 800191c:	ddbc      	ble.n	8001898 <calculate_led_matrix+0x390>
			counter_y++;
 800191e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001922:	3301      	adds	r3, #1
 8001924:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
		  for(int i = init_y; i >= 0; i--){
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	3b01      	subs	r3, #1
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	daac      	bge.n	800188e <calculate_led_matrix+0x386>
		  break;
 8001934:	bf00      	nop
}
 8001936:	bf00      	nop
 8001938:	3740      	adds	r7, #64	; 0x40
 800193a:	46bd      	mov	sp, r7
 800193c:	bdb0      	pop	{r4, r5, r7, pc}
 800193e:	bf00      	nop
 8001940:	200000cc 	.word	0x200000cc

08001944 <fill_new_matrix>:
//-------------------------


void fill_new_matrix(){
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0

	for(int i = 0; i <= 2; i++){
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	e020      	b.n	8001992 <fill_new_matrix+0x4e>
		for(int j = 0; j <= 9; j++){
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	e017      	b.n	8001986 <fill_new_matrix+0x42>
			led_matrix[i][j] = calculation_matrix[i][j];
 8001956:	4914      	ldr	r1, [pc, #80]	; (80019a8 <fill_new_matrix+0x64>)
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	4413      	add	r3, r2
 8001966:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800196a:	4910      	ldr	r1, [pc, #64]	; (80019ac <fill_new_matrix+0x68>)
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	4413      	add	r3, r2
 800197a:	4602      	mov	r2, r0
 800197c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j = 0; j <= 9; j++){
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	3301      	adds	r3, #1
 8001984:	603b      	str	r3, [r7, #0]
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	2b09      	cmp	r3, #9
 800198a:	dde4      	ble.n	8001956 <fill_new_matrix+0x12>
	for(int i = 0; i <= 2; i++){
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3301      	adds	r3, #1
 8001990:	607b      	str	r3, [r7, #4]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b02      	cmp	r3, #2
 8001996:	dddb      	ble.n	8001950 <fill_new_matrix+0xc>
		}
	}
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200000cc 	.word	0x200000cc
 80019ac:	20000108 	.word	0x20000108

080019b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
	...

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <HAL_MspInit+0x44>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <HAL_MspInit+0x44>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6613      	str	r3, [r2, #96]	; 0x60
 80019d2:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_MspInit+0x44>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	607b      	str	r3, [r7, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b09      	ldr	r3, [pc, #36]	; (8001a04 <HAL_MspInit+0x44>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <HAL_MspInit+0x44>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ea:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_MspInit+0x44>)
 80019ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a0c:	bf00      	nop
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1a:	e7fe      	b.n	8001a1a <HardFault_Handler+0x4>

08001a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <MemManage_Handler+0x4>

08001a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <BusFault_Handler+0x4>

08001a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <UsageFault_Handler+0x4>

08001a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 faf2 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <DMA1_Channel1_IRQHandler+0x10>)
 8001a6a:	f001 ff03 	bl	8003874 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200001b0 	.word	0x200001b0

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  	static uint8_t led_index_counter = 0;

  	HAL_GPIO_WritePin(led_gpios_array[led_index_counter], led_pins_array[led_index_counter], GPIO_PIN_RESET);
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <TIM2_IRQHandler+0xa8>)
 8001a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <TIM2_IRQHandler+0xac>)
 8001a92:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f002 f975 	bl	8003d88 <HAL_GPIO_WritePin>

  	if(led_index_counter+1 < 10) led_index_counter++;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b08      	cmp	r3, #8
 8001aa4:	d806      	bhi.n	8001ab4 <TIM2_IRQHandler+0x3c>
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001ab0:	701a      	strb	r2, [r3, #0]
 8001ab2:	e002      	b.n	8001aba <TIM2_IRQHandler+0x42>
  	else 						 led_index_counter = 0;
 8001ab4:	4b19      	ldr	r3, [pc, #100]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]

  	htim1.Instance->CCR1 = led_matrix[0][led_index_counter];
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b19      	ldr	r3, [pc, #100]	; (8001b28 <TIM2_IRQHandler+0xb0>)
 8001ac2:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8001ac6:	4b19      	ldr	r3, [pc, #100]	; (8001b2c <TIM2_IRQHandler+0xb4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	635a      	str	r2, [r3, #52]	; 0x34
  	htim1.Instance->CCR2 = led_matrix[1][led_index_counter];
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	4a15      	ldr	r2, [pc, #84]	; (8001b28 <TIM2_IRQHandler+0xb0>)
 8001ad2:	330a      	adds	r3, #10
 8001ad4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <TIM2_IRQHandler+0xb4>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	639a      	str	r2, [r3, #56]	; 0x38
  	htim1.Instance->CCR3 = led_matrix[2][led_index_counter];
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <TIM2_IRQHandler+0xb0>)
 8001ae4:	3314      	adds	r3, #20
 8001ae6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001aea:	4b10      	ldr	r3, [pc, #64]	; (8001b2c <TIM2_IRQHandler+0xb4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	63da      	str	r2, [r3, #60]	; 0x3c


  	HAL_GPIO_WritePin(led_gpios_array[led_index_counter], led_pins_array[led_index_counter], GPIO_PIN_SET);
 8001af0:	4b0a      	ldr	r3, [pc, #40]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <TIM2_IRQHandler+0xa8>)
 8001af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001afc:	4618      	mov	r0, r3
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <TIM2_IRQHandler+0xa4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <TIM2_IRQHandler+0xac>)
 8001b06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	f002 f93b 	bl	8003d88 <HAL_GPIO_WritePin>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <TIM2_IRQHandler+0xb8>)
 8001b14:	f003 fe8c 	bl	8005830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000014a 	.word	0x2000014a
 8001b20:	20000014 	.word	0x20000014
 8001b24:	20000000 	.word	0x20000000
 8001b28:	20000108 	.word	0x20000108
 8001b2c:	200001f8 	.word	0x200001f8
 8001b30:	20000244 	.word	0x20000244

08001b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <SystemInit+0x64>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b3e:	4a16      	ldr	r2, [pc, #88]	; (8001b98 <SystemInit+0x64>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001b48:	4b14      	ldr	r3, [pc, #80]	; (8001b9c <SystemInit+0x68>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <SystemInit+0x68>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <SystemInit+0x68>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001b5a:	4b10      	ldr	r3, [pc, #64]	; (8001b9c <SystemInit+0x68>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a0f      	ldr	r2, [pc, #60]	; (8001b9c <SystemInit+0x68>)
 8001b60:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001b64:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001b68:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001b6a:	4b0c      	ldr	r3, [pc, #48]	; (8001b9c <SystemInit+0x68>)
 8001b6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b70:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <SystemInit+0x68>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a09      	ldr	r2, [pc, #36]	; (8001b9c <SystemInit+0x68>)
 8001b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	; (8001b9c <SystemInit+0x68>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SystemInit+0x64>)
 8001b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8a:	609a      	str	r2, [r3, #8]
#endif
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00
 8001b9c:	40021000 	.word	0x40021000

08001ba0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b09a      	sub	sp, #104	; 0x68
 8001ba4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	222c      	movs	r2, #44	; 0x2c
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f005 fb32 	bl	8007244 <memset>

  htim1.Instance = TIM1;
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001be2:	4a51      	ldr	r2, [pc, #324]	; (8001d28 <MX_TIM1_Init+0x188>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001be6:	4b4f      	ldr	r3, [pc, #316]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001be8:	2207      	movs	r2, #7
 8001bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001bf2:	4b4c      	ldr	r3, [pc, #304]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001bf4:	f242 720f 	movw	r2, #9999	; 0x270f
 8001bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b4a      	ldr	r3, [pc, #296]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c00:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c0c:	4845      	ldr	r0, [pc, #276]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c0e:	f003 fbdf 	bl	80053d0 <HAL_TIM_Base_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c18:	f7ff feca 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c26:	4619      	mov	r1, r3
 8001c28:	483e      	ldr	r0, [pc, #248]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c2a:	f004 f831 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c34:	f7ff febc 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c38:	483a      	ldr	r0, [pc, #232]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c3a:	f003 fc91 	bl	8005560 <HAL_TIM_PWM_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c44:	f7ff feb4 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c54:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4832      	ldr	r0, [pc, #200]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c5c:	f004 fd40 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c66:	f7ff fea3 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c6a:	2360      	movs	r3, #96	; 0x60
 8001c6c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c72:	2300      	movs	r3, #0
 8001c74:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c76:	2300      	movs	r3, #0
 8001c78:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4825      	ldr	r0, [pc, #148]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001c90:	f003 feee 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001c9a:	f7ff fe89 	bl	80019b0 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ca2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	481e      	ldr	r0, [pc, #120]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001cac:	f003 fee0 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM1_Init+0x11a>
  {
    Error_Handler();
 8001cb6:	f7ff fe7b 	bl	80019b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4818      	ldr	r0, [pc, #96]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001cc4:	f003 fed4 	bl	8005a70 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8001cce:	f7ff fe6f 	bl	80019b0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ce6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cea:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cf4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4807      	ldr	r0, [pc, #28]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001d08:	f004 fd72 	bl	80067f0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0x176>
  {
    Error_Handler();
 8001d12:	f7ff fe4d 	bl	80019b0 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8001d16:	4803      	ldr	r0, [pc, #12]	; (8001d24 <MX_TIM1_Init+0x184>)
 8001d18:	f000 f88e 	bl	8001e38 <HAL_TIM_MspPostInit>

}
 8001d1c:	bf00      	nop
 8001d1e:	3768      	adds	r7, #104	; 0x68
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	200001f8 	.word	0x200001f8
 8001d28:	40012c00 	.word	0x40012c00

08001d2c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d32:	f107 0310 	add.w	r3, r7, #16
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]
 8001d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d4c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d50:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d54:	224f      	movs	r2, #79	; 0x4f
 8001d56:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d58:	4b1a      	ldr	r3, [pc, #104]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001d5e:	4b19      	ldr	r3, [pc, #100]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d72:	4814      	ldr	r0, [pc, #80]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d74:	f003 fb2c 	bl	80053d0 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001d7e:	f7ff fe17 	bl	80019b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480d      	ldr	r0, [pc, #52]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001d90:	f003 ff7e 	bl	8005c90 <HAL_TIM_ConfigClockSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001d9a:	f7ff fe09 	bl	80019b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d9e:	2320      	movs	r3, #32
 8001da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	4619      	mov	r1, r3
 8001daa:	4806      	ldr	r0, [pc, #24]	; (8001dc4 <MX_TIM2_Init+0x98>)
 8001dac:	f004 fc98 	bl	80066e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001db6:	f7ff fdfb 	bl	80019b0 <Error_Handler>
  }

}
 8001dba:	bf00      	nop
 8001dbc:	3720      	adds	r7, #32
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000244 	.word	0x20000244

08001dc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <HAL_TIM_Base_MspInit+0x68>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d10c      	bne.n	8001df4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dda:	4b16      	ldr	r3, [pc, #88]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dde:	4a15      	ldr	r2, [pc, #84]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001de0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001de4:	6613      	str	r3, [r2, #96]	; 0x60
 8001de6:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001df2:	e018      	b.n	8001e26 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dfc:	d113      	bne.n	8001e26 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a0c      	ldr	r2, [pc, #48]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_TIM_Base_MspInit+0x6c>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2100      	movs	r1, #0
 8001e1a:	201c      	movs	r0, #28
 8001e1c:	f001 fbdb 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e20:	201c      	movs	r0, #28
 8001e22:	f001 fbf4 	bl	800360e <HAL_NVIC_EnableIRQ>
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a12      	ldr	r2, [pc, #72]	; (8001ea0 <HAL_TIM_MspPostInit+0x68>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d11d      	bne.n	8001e96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a11      	ldr	r2, [pc, #68]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <HAL_TIM_MspPostInit+0x6c>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = led_line_2_Pin|led_line_3_Pin|led_line_1_Pin;
 8001e72:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001e76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 030c 	add.w	r3, r7, #12
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e92:	f001 fdcf 	bl	8003a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e96:	bf00      	nop
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40012c00 	.word	0x40012c00
 8001ea4:	40021000 	.word	0x40021000

08001ea8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001eac:	4b14      	ldr	r3, [pc, #80]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eae:	4a15      	ldr	r2, [pc, #84]	; (8001f04 <MX_USART2_UART_Init+0x5c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART2_UART_Init+0x58>)
 8001eec:	f004 fd1c 	bl	8006928 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001ef6:	f7ff fd5b 	bl	80019b0 <Error_Handler>
  }

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000290 	.word	0x20000290
 8001f04:	40004400 	.word	0x40004400

08001f08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a17      	ldr	r2, [pc, #92]	; (8001f84 <HAL_UART_MspInit+0x7c>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d128      	bne.n	8001f7c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2a:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	6593      	str	r3, [r2, #88]	; 0x58
 8001f36:	4b14      	ldr	r3, [pc, #80]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f46:	4a10      	ldr	r2, [pc, #64]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	; (8001f88 <HAL_UART_MspInit+0x80>)
 8001f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5a:	230c      	movs	r3, #12
 8001f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f66:	2303      	movs	r3, #3
 8001f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6a:	2307      	movs	r3, #7
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f6e:	f107 0314 	add.w	r3, r7, #20
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f78:	f001 fd5c 	bl	8003a34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f7c:	bf00      	nop
 8001f7e:	3728      	adds	r7, #40	; 0x28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40004400 	.word	0x40004400
 8001f88:	40021000 	.word	0x40021000

08001f8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f92:	2300      	movs	r3, #0
 8001f94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <HAL_Init+0x3c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_Init+0x3c>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa2:	2003      	movs	r0, #3
 8001fa4:	f001 fb0c 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f000 f80f 	bl	8001fcc <HAL_InitTick>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	71fb      	strb	r3, [r7, #7]
 8001fb8:	e001      	b.n	8001fbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fba:	f7ff fd01 	bl	80019c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40022000 	.word	0x40022000

08001fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_InitTick+0x6c>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d023      	beq.n	8002028 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_InitTick+0x70>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b14      	ldr	r3, [pc, #80]	; (8002038 <HAL_InitTick+0x6c>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f001 fb17 	bl	800362a <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d809      	bhi.n	800201c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	f04f 30ff 	mov.w	r0, #4294967295
 8002010:	f001 fae1 	bl	80035d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_InitTick+0x74>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e007      	b.n	800202c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e004      	b.n	800202c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	e001      	b.n	800202c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	20000044 	.word	0x20000044
 800203c:	2000003c 	.word	0x2000003c
 8002040:	20000040 	.word	0x20000040

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000044 	.word	0x20000044
 8002068:	20000310 	.word	0x20000310

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000310 	.word	0x20000310

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ffee 	bl	800206c <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffde 	bl	800206c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000044 	.word	0x20000044

080020cc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
}
 80020e6:	bf00      	nop
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020f2:	b480      	push	{r7}
 80020f4:	b083      	sub	sp, #12
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002134:	b480      	push	{r7}
 8002136:	b087      	sub	sp, #28
 8002138:	af00      	add	r7, sp, #0
 800213a:	60f8      	str	r0, [r7, #12]
 800213c:	60b9      	str	r1, [r7, #8]
 800213e:	607a      	str	r2, [r7, #4]
 8002140:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	461a      	mov	r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b08      	ldr	r3, [pc, #32]	; (8002178 <LL_ADC_SetOffset+0x44>)
 8002156:	4013      	ands	r3, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	4313      	orrs	r3, r2
 8002164:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800216c:	bf00      	nop
 800216e:	371c      	adds	r7, #28
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	03fff000 	.word	0x03fff000

0800217c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3360      	adds	r3, #96	; 0x60
 800218a:	461a      	mov	r2, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3360      	adds	r3, #96	; 0x60
 80021b8:	461a      	mov	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	431a      	orrs	r2, r3
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021d2:	bf00      	nop
 80021d4:	371c      	adds	r7, #28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	3330      	adds	r3, #48	; 0x30
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	4413      	add	r3, r2
 8002222:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	211f      	movs	r1, #31
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	f003 011f 	and.w	r1, r3, #31
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	fa01 f303 	lsl.w	r3, r1, r3
 800224a:	431a      	orrs	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800225c:	b480      	push	{r7}
 800225e:	b087      	sub	sp, #28
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3314      	adds	r3, #20
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	0e5b      	lsrs	r3, r3, #25
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	4413      	add	r3, r2
 800227a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	0d1b      	lsrs	r3, r3, #20
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2107      	movs	r1, #7
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	401a      	ands	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	0d1b      	lsrs	r3, r3, #20
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	431a      	orrs	r2, r3
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022a6:	bf00      	nop
 80022a8:	371c      	adds	r7, #28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f003 0318 	and.w	r3, r3, #24
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022d8:	40d9      	lsrs	r1, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	400b      	ands	r3, r1
 80022de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022ea:	bf00      	nop
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	0007ffff 	.word	0x0007ffff

080022fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 031f 	and.w	r3, r3, #31
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002328:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6093      	str	r3, [r2, #8]
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800234c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002350:	d101      	bne.n	8002356 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	370c      	adds	r7, #12
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002374:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002378:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023a0:	d101      	bne.n	80023a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <LL_ADC_IsEnabled+0x18>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <LL_ADC_IsEnabled+0x1a>
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002412:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002416:	f043 0204 	orr.w	r2, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800242a:	b480      	push	{r7}
 800242c:	b083      	sub	sp, #12
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 0304 	and.w	r3, r3, #4
 800243a:	2b04      	cmp	r3, #4
 800243c:	d101      	bne.n	8002442 <LL_ADC_REG_IsConversionOngoing+0x18>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b08      	cmp	r3, #8
 8002462:	d101      	bne.n	8002468 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b089      	sub	sp, #36	; 0x24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e134      	b.n	80026fc <HAL_ADC_Init+0x284>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7fe fd43 	bl	8000f2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff3f 	bl	800233c <LL_ADC_IsDeepPowerDownEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff25 	bl	8002318 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff ff5a 	bl	800238c <LL_ADC_IsInternalRegulatorEnabled>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d113      	bne.n	8002506 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff ff3e 	bl	8002364 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80024e8:	4b86      	ldr	r3, [pc, #536]	; (8002704 <HAL_ADC_Init+0x28c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	099b      	lsrs	r3, r3, #6
 80024ee:	4a86      	ldr	r2, [pc, #536]	; (8002708 <HAL_ADC_Init+0x290>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	099b      	lsrs	r3, r3, #6
 80024f6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f9      	bne.n	80024fa <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ff3e 	bl	800238c <LL_ADC_IsInternalRegulatorEnabled>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff77 	bl	800242a <LL_ADC_REG_IsConversionOngoing>
 800253c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 80cf 	bne.w	80026ea <HAL_ADC_Init+0x272>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 80cb 	bne.w	80026ea <HAL_ADC_Init+0x272>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800255c:	f043 0202 	orr.w	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff37 	bl	80023dc <LL_ADC_IsEnabled>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d115      	bne.n	80025a0 <HAL_ADC_Init+0x128>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002574:	4865      	ldr	r0, [pc, #404]	; (800270c <HAL_ADC_Init+0x294>)
 8002576:	f7ff ff31 	bl	80023dc <LL_ADC_IsEnabled>
 800257a:	4604      	mov	r4, r0
 800257c:	4864      	ldr	r0, [pc, #400]	; (8002710 <HAL_ADC_Init+0x298>)
 800257e:	f7ff ff2d 	bl	80023dc <LL_ADC_IsEnabled>
 8002582:	4603      	mov	r3, r0
 8002584:	431c      	orrs	r4, r3
 8002586:	4863      	ldr	r0, [pc, #396]	; (8002714 <HAL_ADC_Init+0x29c>)
 8002588:	f7ff ff28 	bl	80023dc <LL_ADC_IsEnabled>
 800258c:	4603      	mov	r3, r0
 800258e:	4323      	orrs	r3, r4
 8002590:	2b00      	cmp	r3, #0
 8002592:	d105      	bne.n	80025a0 <HAL_ADC_Init+0x128>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4619      	mov	r1, r3
 800259a:	485f      	ldr	r0, [pc, #380]	; (8002718 <HAL_ADC_Init+0x2a0>)
 800259c:	f7ff fd96 	bl	80020cc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e5b      	ldrb	r3, [r3, #25]
 80025a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_Init+0x164>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	3b01      	subs	r3, #1
 80025d4:	045b      	lsls	r3, r3, #17
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_ADC_Init+0x180>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_ADC_Init+0x2a4>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	430b      	orrs	r3, r1
 800260a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff0a 	bl	800242a <LL_ADC_REG_IsConversionOngoing>
 8002616:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff17 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 8002622:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13d      	bne.n	80026a6 <HAL_ADC_Init+0x22e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d13a      	bne.n	80026a6 <HAL_ADC_Init+0x22e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002634:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800263c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800264c:	f023 0302 	bic.w	r3, r3, #2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6812      	ldr	r2, [r2, #0]
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	430b      	orrs	r3, r1
 8002658:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002660:	2b01      	cmp	r3, #1
 8002662:	d118      	bne.n	8002696 <HAL_ADC_Init+0x21e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800266e:	f023 0304 	bic.w	r3, r3, #4
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800267a:	4311      	orrs	r1, r2
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002680:	4311      	orrs	r1, r2
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002686:	430a      	orrs	r2, r1
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	611a      	str	r2, [r3, #16]
 8002694:	e007      	b.n	80026a6 <HAL_ADC_Init+0x22e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	691a      	ldr	r2, [r3, #16]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10c      	bne.n	80026c8 <HAL_ADC_Init+0x250>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b4:	f023 010f 	bic.w	r1, r3, #15
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	1e5a      	subs	r2, r3, #1
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
 80026c6:	e007      	b.n	80026d8 <HAL_ADC_Init+0x260>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 020f 	bic.w	r2, r2, #15
 80026d6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f023 0303 	bic.w	r3, r3, #3
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	655a      	str	r2, [r3, #84]	; 0x54
 80026e8:	e007      	b.n	80026fa <HAL_ADC_Init+0x282>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80026fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3724      	adds	r7, #36	; 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	2000003c 	.word	0x2000003c
 8002708:	053e2d63 	.word	0x053e2d63
 800270c:	50040000 	.word	0x50040000
 8002710:	50040100 	.word	0x50040100
 8002714:	50040200 	.word	0x50040200
 8002718:	50040300 	.word	0x50040300
 800271c:	fff0c007 	.word	0xfff0c007

08002720 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272c:	4850      	ldr	r0, [pc, #320]	; (8002870 <HAL_ADC_Start_DMA+0x150>)
 800272e:	f7ff fde5 	bl	80022fc <LL_ADC_GetMultimode>
 8002732:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fe76 	bl	800242a <LL_ADC_REG_IsConversionOngoing>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 808e 	bne.w	8002862 <HAL_ADC_Start_DMA+0x142>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_ADC_Start_DMA+0x34>
 8002750:	2302      	movs	r3, #2
 8002752:	e089      	b.n	8002868 <HAL_ADC_Start_DMA+0x148>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b05      	cmp	r3, #5
 8002766:	d002      	beq.n	800276e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b09      	cmp	r3, #9
 800276c:	d172      	bne.n	8002854 <HAL_ADC_Start_DMA+0x134>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 fc96 	bl	80030a0 <ADC_Enable>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002778:	7dfb      	ldrb	r3, [r7, #23]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d165      	bne.n	800284a <HAL_ADC_Start_DMA+0x12a>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_ADC_Start_DMA+0x154>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d002      	beq.n	80027a2 <HAL_ADC_Start_DMA+0x82>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e000      	b.n	80027a4 <HAL_ADC_Start_DMA+0x84>
 80027a2:	4b35      	ldr	r3, [pc, #212]	; (8002878 <HAL_ADC_Start_DMA+0x158>)
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d002      	beq.n	80027b2 <HAL_ADC_Start_DMA+0x92>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_ADC_Start_DMA+0x9e>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d006      	beq.n	80027d8 <HAL_ADC_Start_DMA+0xb8>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f023 0206 	bic.w	r2, r3, #6
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	659a      	str	r2, [r3, #88]	; 0x58
 80027d6:	e002      	b.n	80027de <HAL_ADC_Start_DMA+0xbe>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	4a26      	ldr	r2, [pc, #152]	; (800287c <HAL_ADC_Start_DMA+0x15c>)
 80027e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	4a25      	ldr	r2, [pc, #148]	; (8002880 <HAL_ADC_Start_DMA+0x160>)
 80027ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a24      	ldr	r2, [pc, #144]	; (8002884 <HAL_ADC_Start_DMA+0x164>)
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	221c      	movs	r2, #28
 80027fc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0210 	orr.w	r2, r2, #16
 8002814:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f042 0201 	orr.w	r2, r2, #1
 8002824:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	3340      	adds	r3, #64	; 0x40
 8002830:	4619      	mov	r1, r3
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f000 ffbd 	bl	80037b4 <HAL_DMA_Start_IT>
 800283a:	4603      	mov	r3, r0
 800283c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fddd 	bl	8002402 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002848:	e00d      	b.n	8002866 <HAL_ADC_Start_DMA+0x146>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8002852:	e008      	b.n	8002866 <HAL_ADC_Start_DMA+0x146>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002860:	e001      	b.n	8002866 <HAL_ADC_Start_DMA+0x146>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002866:	7dfb      	ldrb	r3, [r7, #23]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3718      	adds	r7, #24
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	50040300 	.word	0x50040300
 8002874:	50040100 	.word	0x50040100
 8002878:	50040000 	.word	0x50040000
 800287c:	08003155 	.word	0x08003155
 8002880:	0800322d 	.word	0x0800322d
 8002884:	08003249 	.word	0x08003249

08002888 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0b6      	sub	sp, #216	; 0xd8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADC_ConfigChannel+0x22>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e3c6      	b.n	8003074 <HAL_ADC_ConfigChannel+0x7b0>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fd99 	bl	800242a <LL_ADC_REG_IsConversionOngoing>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 83a7 	bne.w	800304e <HAL_ADC_ConfigChannel+0x78a>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b05      	cmp	r3, #5
 8002906:	d824      	bhi.n	8002952 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	3b02      	subs	r3, #2
 800290e:	2b03      	cmp	r3, #3
 8002910:	d81b      	bhi.n	800294a <HAL_ADC_ConfigChannel+0x86>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <HAL_ADC_ConfigChannel+0x54>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002929 	.word	0x08002929
 800291c:	08002931 	.word	0x08002931
 8002920:	08002939 	.word	0x08002939
 8002924:	08002941 	.word	0x08002941
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	220c      	movs	r2, #12
 800292c:	605a      	str	r2, [r3, #4]
          break;
 800292e:	e011      	b.n	8002954 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2212      	movs	r2, #18
 8002934:	605a      	str	r2, [r3, #4]
          break;
 8002936:	e00d      	b.n	8002954 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2218      	movs	r2, #24
 800293c:	605a      	str	r2, [r3, #4]
          break;
 800293e:	e009      	b.n	8002954 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002946:	605a      	str	r2, [r3, #4]
          break;
 8002948:	e004      	b.n	8002954 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2206      	movs	r2, #6
 800294e:	605a      	str	r2, [r3, #4]
          break;
 8002950:	e000      	b.n	8002954 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002952:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	461a      	mov	r2, r3
 8002962:	f7ff fc4f 	bl	8002204 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4618      	mov	r0, r3
 800296c:	f7ff fd5d 	bl	800242a <LL_ADC_REG_IsConversionOngoing>
 8002970:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff fd69 	bl	8002450 <LL_ADC_INJ_IsConversionOngoing>
 800297e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002982:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 81a6 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002990:	2b00      	cmp	r3, #0
 8002992:	f040 81a1 	bne.w	8002cd8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7ff fc5a 	bl	800225c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	695a      	ldr	r2, [r3, #20]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	08db      	lsrs	r3, r3, #3
 80029b4:	f003 0303 	and.w	r3, r3, #3
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	2b04      	cmp	r3, #4
 80029c8:	d00a      	beq.n	80029e0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	6919      	ldr	r1, [r3, #16]
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029da:	f7ff fbab 	bl	8002134 <LL_ADC_SetOffset>
 80029de:	e17b      	b.n	8002cd8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2100      	movs	r1, #0
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff fbc8 	bl	800217c <LL_ADC_GetOffsetChannel>
 80029ec:	4603      	mov	r3, r0
 80029ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_ADC_ConfigChannel+0x148>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2100      	movs	r1, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fbbd 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002a02:	4603      	mov	r3, r0
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	f003 021f 	and.w	r2, r3, #31
 8002a0a:	e01e      	b.n	8002a4a <HAL_ADC_ConfigChannel+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7ff fbb2 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002a3a:	2320      	movs	r3, #32
 8002a3c:	e004      	b.n	8002a48 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d105      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x19e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	e018      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a6e:	fa93 f3a3 	rbit	r3, r3
 8002a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002a76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002a7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002a86:	2320      	movs	r3, #32
 8002a88:	e004      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d106      	bne.n	8002aa6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff fb81 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2101      	movs	r1, #1
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fb65 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10a      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x20e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff fb5a 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	0e9b      	lsrs	r3, r3, #26
 8002acc:	f003 021f 	and.w	r2, r3, #31
 8002ad0:	e01e      	b.n	8002b10 <HAL_ADC_ConfigChannel+0x24c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fb4f 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae8:	fa93 f3a3 	rbit	r3, r3
 8002aec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002af0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002af4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002af8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002b00:	2320      	movs	r3, #32
 8002b02:	e004      	b.n	8002b0e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002b04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b08:	fab3 f383 	clz	r3, r3
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d105      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x264>
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0e9b      	lsrs	r3, r3, #26
 8002b22:	f003 031f 	and.w	r3, r3, #31
 8002b26:	e018      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x296>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b34:	fa93 f3a3 	rbit	r3, r3
 8002b38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002b3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002b44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002b4c:	2320      	movs	r3, #32
 8002b4e:	e004      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002b50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b54:	fab3 f383 	clz	r3, r3
 8002b58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	2101      	movs	r1, #1
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fb1e 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fb02 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10a      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x2d4>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2102      	movs	r1, #2
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff faf7 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	0e9b      	lsrs	r3, r3, #26
 8002b92:	f003 021f 	and.w	r2, r3, #31
 8002b96:	e01e      	b.n	8002bd6 <HAL_ADC_ConfigChannel+0x312>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff faec 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002bb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002bc6:	2320      	movs	r3, #32
 8002bc8:	e004      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002bca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d105      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x32a>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	0e9b      	lsrs	r3, r3, #26
 8002be8:	f003 031f 	and.w	r3, r3, #31
 8002bec:	e016      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x358>
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bfa:	fa93 f3a3 	rbit	r3, r3
 8002bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002c00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002c06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002c0e:	2320      	movs	r3, #32
 8002c10:	e004      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002c12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c16:	fab3 f383 	clz	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2200      	movs	r2, #0
 8002c26:	2102      	movs	r1, #2
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fabd 	bl	80021a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2103      	movs	r1, #3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff faa1 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10a      	bne.n	8002c5a <HAL_ADC_ConfigChannel+0x396>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2103      	movs	r1, #3
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fa96 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002c50:	4603      	mov	r3, r0
 8002c52:	0e9b      	lsrs	r3, r3, #26
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	e017      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x3c6>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2103      	movs	r1, #3
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fa8b 	bl	800217c <LL_ADC_GetOffsetChannel>
 8002c66:	4603      	mov	r3, r0
 8002c68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6c:	fa93 f3a3 	rbit	r3, r3
 8002c70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002c72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002c76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	e003      	b.n	8002c88 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c82:	fab3 f383 	clz	r3, r3
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d105      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x3de>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	0e9b      	lsrs	r3, r3, #26
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	e011      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x402>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002caa:	fa93 f3a3 	rbit	r3, r3
 8002cae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002cba:	2320      	movs	r3, #32
 8002cbc:	e003      	b.n	8002cc6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d106      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fa68 	bl	80021a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fb7d 	bl	80023dc <LL_ADC_IsEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f040 813f 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6819      	ldr	r1, [r3, #0]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f7ff fadc 	bl	80022b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	4a8e      	ldr	r2, [pc, #568]	; (8002f3c <HAL_ADC_ConfigChannel+0x678>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	f040 8130 	bne.w	8002f68 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10b      	bne.n	8002d30 <HAL_ADC_ConfigChannel+0x46c>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	0e9b      	lsrs	r3, r3, #26
 8002d1e:	3301      	adds	r3, #1
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	2b09      	cmp	r3, #9
 8002d26:	bf94      	ite	ls
 8002d28:	2301      	movls	r3, #1
 8002d2a:	2300      	movhi	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	e019      	b.n	8002d64 <HAL_ADC_ConfigChannel+0x4a0>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002d3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d40:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002d42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002d48:	2320      	movs	r3, #32
 8002d4a:	e003      	b.n	8002d54 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002d4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d4e:	fab3 f383 	clz	r3, r3
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	3301      	adds	r3, #1
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	2b09      	cmp	r3, #9
 8002d5c:	bf94      	ite	ls
 8002d5e:	2301      	movls	r3, #1
 8002d60:	2300      	movhi	r3, #0
 8002d62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d079      	beq.n	8002e5c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x4c0>
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	0e9b      	lsrs	r3, r3, #26
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d82:	e015      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x4ec>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d94:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002d96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	069b      	lsls	r3, r3, #26
 8002dac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d109      	bne.n	8002dd0 <HAL_ADC_ConfigChannel+0x50c>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	0e9b      	lsrs	r3, r3, #26
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2101      	movs	r1, #1
 8002dca:	fa01 f303 	lsl.w	r3, r1, r3
 8002dce:	e017      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x53c>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	fa93 f3a3 	rbit	r3, r3
 8002ddc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002de2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e003      	b.n	8002df4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dee:	fab3 f383 	clz	r3, r3
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	3301      	adds	r3, #1
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002e00:	ea42 0103 	orr.w	r1, r2, r3
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10a      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x562>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0e9b      	lsrs	r3, r3, #26
 8002e16:	3301      	adds	r3, #1
 8002e18:	f003 021f 	and.w	r2, r3, #31
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	051b      	lsls	r3, r3, #20
 8002e24:	e018      	b.n	8002e58 <HAL_ADC_ConfigChannel+0x594>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2e:	fa93 f3a3 	rbit	r3, r3
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e003      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e44:	fab3 f383 	clz	r3, r3
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 021f 	and.w	r2, r3, #31
 8002e50:	4613      	mov	r3, r2
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	4413      	add	r3, r2
 8002e56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e58:	430b      	orrs	r3, r1
 8002e5a:	e080      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d107      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x5b4>
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	0e9b      	lsrs	r3, r3, #26
 8002e6e:	3301      	adds	r3, #1
 8002e70:	069b      	lsls	r3, r3, #26
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e76:	e015      	b.n	8002ea4 <HAL_ADC_ConfigChannel+0x5e0>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d101      	bne.n	8002e94 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002e90:	2320      	movs	r3, #32
 8002e92:	e003      	b.n	8002e9c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	3301      	adds	r3, #1
 8002e9e:	069b      	lsls	r3, r3, #26
 8002ea0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d109      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x600>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0e9b      	lsrs	r3, r3, #26
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	e017      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x630>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	fa93 f3a3 	rbit	r3, r3
 8002ed0:	61fb      	str	r3, [r7, #28]
  return result;
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d101      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002edc:	2320      	movs	r3, #32
 8002ede:	e003      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	fab3 f383 	clz	r3, r3
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	3301      	adds	r3, #1
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2101      	movs	r1, #1
 8002ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef4:	ea42 0103 	orr.w	r1, r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10d      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x65c>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	0e9b      	lsrs	r3, r3, #26
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f003 021f 	and.w	r2, r3, #31
 8002f10:	4613      	mov	r3, r2
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4413      	add	r3, r2
 8002f16:	3b1e      	subs	r3, #30
 8002f18:	051b      	lsls	r3, r3, #20
 8002f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	e01d      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x698>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa93 f3a3 	rbit	r3, r3
 8002f2c:	613b      	str	r3, [r7, #16]
  return result;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d103      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8002f38:	2320      	movs	r3, #32
 8002f3a:	e005      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x684>
 8002f3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	fab3 f383 	clz	r3, r3
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	3301      	adds	r3, #1
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	4613      	mov	r3, r2
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	4413      	add	r3, r2
 8002f54:	3b1e      	subs	r3, #30
 8002f56:	051b      	lsls	r3, r3, #20
 8002f58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f5c:	430b      	orrs	r3, r1
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	6892      	ldr	r2, [r2, #8]
 8002f62:	4619      	mov	r1, r3
 8002f64:	f7ff f97a 	bl	800225c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d079      	beq.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f74:	4842      	ldr	r0, [pc, #264]	; (8003080 <HAL_ADC_ConfigChannel+0x7bc>)
 8002f76:	f7ff f8cf 	bl	8002118 <LL_ADC_GetCommonPathInternalCh>
 8002f7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d12b      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x71c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d125      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x71c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a3b      	ldr	r2, [pc, #236]	; (8003088 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_ADC_ConfigChannel+0x6e4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a3a      	ldr	r2, [pc, #232]	; (800308c <HAL_ADC_ConfigChannel+0x7c8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d15c      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x79e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4833      	ldr	r0, [pc, #204]	; (8003080 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fb4:	f7ff f89d 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002fb8:	4b35      	ldr	r3, [pc, #212]	; (8003090 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	099b      	lsrs	r3, r3, #6
 8002fbe:	4a35      	ldr	r2, [pc, #212]	; (8003094 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc4:	099a      	lsrs	r2, r3, #6
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fd0:	e002      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x714>
          {
            wait_loop_index--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1f9      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x70e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fde:	e040      	b.n	8003062 <HAL_ADC_ConfigChannel+0x79e>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d118      	bne.n	800301c <HAL_ADC_ConfigChannel+0x758>
 8002fea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d112      	bne.n	800301c <HAL_ADC_ConfigChannel+0x758>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a23      	ldr	r2, [pc, #140]	; (8003088 <HAL_ADC_ConfigChannel+0x7c4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d004      	beq.n	800300a <HAL_ADC_ConfigChannel+0x746>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a21      	ldr	r2, [pc, #132]	; (800308c <HAL_ADC_ConfigChannel+0x7c8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d12d      	bne.n	8003066 <HAL_ADC_ConfigChannel+0x7a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800300a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800300e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003012:	4619      	mov	r1, r3
 8003014:	481a      	ldr	r0, [pc, #104]	; (8003080 <HAL_ADC_ConfigChannel+0x7bc>)
 8003016:	f7ff f86c 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800301a:	e024      	b.n	8003066 <HAL_ADC_ConfigChannel+0x7a2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a1e      	ldr	r2, [pc, #120]	; (800309c <HAL_ADC_ConfigChannel+0x7d8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d120      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800302a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a14      	ldr	r2, [pc, #80]	; (8003088 <HAL_ADC_ConfigChannel+0x7c4>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d115      	bne.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800303c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003040:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003044:	4619      	mov	r1, r3
 8003046:	480e      	ldr	r0, [pc, #56]	; (8003080 <HAL_ADC_ConfigChannel+0x7bc>)
 8003048:	f7ff f853 	bl	80020f2 <LL_ADC_SetCommonPathInternalCh>
 800304c:	e00c      	b.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	f043 0220 	orr.w	r2, r3, #32
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003060:	e002      	b.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003062:	bf00      	nop
 8003064:	e000      	b.n	8003068 <HAL_ADC_ConfigChannel+0x7a4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003066:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003070:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003074:	4618      	mov	r0, r3
 8003076:	37d8      	adds	r7, #216	; 0xd8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	80080000 	.word	0x80080000
 8003080:	50040300 	.word	0x50040300
 8003084:	c7520000 	.word	0xc7520000
 8003088:	50040000 	.word	0x50040000
 800308c:	50040200 	.word	0x50040200
 8003090:	2000003c 	.word	0x2000003c
 8003094:	053e2d63 	.word	0x053e2d63
 8003098:	cb840000 	.word	0xcb840000
 800309c:	80000001 	.word	0x80000001

080030a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff f995 	bl	80023dc <LL_ADC_IsEnabled>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d146      	bne.n	8003146 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	4b24      	ldr	r3, [pc, #144]	; (8003150 <ADC_Enable+0xb0>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00d      	beq.n	80030e2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f043 0210 	orr.w	r2, r3, #16
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f043 0201 	orr.w	r2, r3, #1
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e032      	b.n	8003148 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f964 	bl	80023b4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030ec:	f7fe ffbe 	bl	800206c <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f2:	e021      	b.n	8003138 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7ff f96f 	bl	80023dc <LL_ADC_IsEnabled>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d104      	bne.n	800310e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f953 	bl	80023b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800310e:	f7fe ffad 	bl	800206c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d90d      	bls.n	8003138 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	659a      	str	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	e007      	b.n	8003148 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d1d6      	bne.n	80030f4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	8000003f 	.word	0x8000003f

08003154 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800316a:	2b00      	cmp	r3, #0
 800316c:	d14b      	bne.n	8003206 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d021      	beq.n	80031cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff f826 	bl	80021de <LL_ADC_REG_IsTriggerSourceSWStart>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d032      	beq.n	80031fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d12b      	bne.n	80031fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d11f      	bne.n	80031fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0201 	orr.w	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
 80031ca:	e018      	b.n	80031fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d111      	bne.n	80031fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d105      	bne.n	80031fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f6:	f043 0201 	orr.w	r2, r3, #1
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fb42 	bl	8002888 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003204:	e00e      	b.n	8003224 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f7ff fb4c 	bl	80028b0 <HAL_ADC_ErrorCallback>
}
 8003218:	e004      	b.n	8003224 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f7ff fb2e 	bl	800289c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003240:	bf00      	nop
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003254:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003266:	f043 0204 	orr.w	r2, r3, #4
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff fb1e 	bl	80028b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <LL_ADC_IsEnabled>:
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d101      	bne.n	8003294 <LL_ADC_IsEnabled+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_IsEnabled+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d101      	bne.n	80032ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b09f      	sub	sp, #124	; 0x7c
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d101      	bne.n	80032e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e08f      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2201      	movs	r2, #1
 80032ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a47      	ldr	r2, [pc, #284]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d102      	bne.n	80032fe <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80032f8:	4b46      	ldr	r3, [pc, #280]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	e001      	b.n	8003302 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10b      	bne.n	8003320 <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330c:	f043 0220 	orr.w	r2, r3, #32
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e072      	b.n	8003406 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ffbd 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 8003328:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff ffb7 	bl	80032a2 <LL_ADC_REG_IsConversionOngoing>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d154      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800333a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800333c:	2b00      	cmp	r3, #0
 800333e:	d151      	bne.n	80033e4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003340:	4b35      	ldr	r3, [pc, #212]	; (8003418 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003342:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02c      	beq.n	80033a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800334c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800335e:	035b      	lsls	r3, r3, #13
 8003360:	430b      	orrs	r3, r1
 8003362:	431a      	orrs	r2, r3
 8003364:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003366:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003368:	4829      	ldr	r0, [pc, #164]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800336a:	f7ff ff87 	bl	800327c <LL_ADC_IsEnabled>
 800336e:	4604      	mov	r4, r0
 8003370:	4828      	ldr	r0, [pc, #160]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8003372:	f7ff ff83 	bl	800327c <LL_ADC_IsEnabled>
 8003376:	4603      	mov	r3, r0
 8003378:	431c      	orrs	r4, r3
 800337a:	4828      	ldr	r0, [pc, #160]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800337c:	f7ff ff7e 	bl	800327c <LL_ADC_IsEnabled>
 8003380:	4603      	mov	r3, r0
 8003382:	4323      	orrs	r3, r4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d137      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003388:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003390:	f023 030f 	bic.w	r3, r3, #15
 8003394:	683a      	ldr	r2, [r7, #0]
 8003396:	6811      	ldr	r1, [r2, #0]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	6892      	ldr	r2, [r2, #8]
 800339c:	430a      	orrs	r2, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033a4:	e028      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80033a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033b2:	4817      	ldr	r0, [pc, #92]	; (8003410 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80033b4:	f7ff ff62 	bl	800327c <LL_ADC_IsEnabled>
 80033b8:	4604      	mov	r4, r0
 80033ba:	4816      	ldr	r0, [pc, #88]	; (8003414 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 80033bc:	f7ff ff5e 	bl	800327c <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	431c      	orrs	r4, r3
 80033c4:	4815      	ldr	r0, [pc, #84]	; (800341c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80033c6:	f7ff ff59 	bl	800327c <LL_ADC_IsEnabled>
 80033ca:	4603      	mov	r3, r0
 80033cc:	4323      	orrs	r3, r4
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d112      	bne.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80033d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80033da:	f023 030f 	bic.w	r3, r3, #15
 80033de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033e2:	e009      	b.n	80033f8 <HAL_ADCEx_MultiModeConfigChannel+0x130>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e8:	f043 0220 	orr.w	r2, r3, #32
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80033f6:	e000      	b.n	80033fa <HAL_ADCEx_MultiModeConfigChannel+0x132>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80033f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003402:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003406:	4618      	mov	r0, r3
 8003408:	377c      	adds	r7, #124	; 0x7c
 800340a:	46bd      	mov	sp, r7
 800340c:	bd90      	pop	{r4, r7, pc}
 800340e:	bf00      	nop
 8003410:	50040000 	.word	0x50040000
 8003414:	50040100 	.word	0x50040100
 8003418:	50040300 	.word	0x50040300
 800341c:	50040200 	.word	0x50040200

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e098      	b.n	8003788 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_DMA_Init+0x150>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_DMA_Init+0x154>)
 800366a:	4413      	add	r3, r2
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <HAL_DMA_Init+0x158>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a48      	ldr	r2, [pc, #288]	; (80037a0 <HAL_DMA_Init+0x15c>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_DMA_Init+0x160>)
 800368a:	4413      	add	r3, r2
 800368c:	4a43      	ldr	r2, [pc, #268]	; (800379c <HAL_DMA_Init+0x158>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <HAL_DMA_Init+0x164>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fa:	d039      	beq.n	8003770 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_DMA_Init+0x15c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11a      	bne.n	800373c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <HAL_DMA_Init+0x168>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f003 031c 	and.w	r3, r3, #28
 8003712:	210f      	movs	r1, #15
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <HAL_DMA_Init+0x168>)
 800371c:	4013      	ands	r3, r2
 800371e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_DMA_Init+0x168>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f003 031c 	and.w	r3, r3, #28
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	491d      	ldr	r1, [pc, #116]	; (80037ac <HAL_DMA_Init+0x168>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
 800373a:	e019      	b.n	8003770 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_DMA_Init+0x16c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 031c 	and.w	r3, r3, #28
 8003748:	210f      	movs	r1, #15
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	4917      	ldr	r1, [pc, #92]	; (80037b0 <HAL_DMA_Init+0x16c>)
 8003752:	4013      	ands	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_DMA_Init+0x16c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f003 031c 	and.w	r3, r3, #28
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	4911      	ldr	r1, [pc, #68]	; (80037b0 <HAL_DMA_Init+0x16c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40020407 	.word	0x40020407
 8003798:	bffdfff8 	.word	0xbffdfff8
 800379c:	cccccccd 	.word	0xcccccccd
 80037a0:	40020000 	.word	0x40020000
 80037a4:	bffdfbf8 	.word	0xbffdfbf8
 80037a8:	40020400 	.word	0x40020400
 80037ac:	400200a8 	.word	0x400200a8
 80037b0:	400204a8 	.word	0x400204a8

080037b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037c2:	2300      	movs	r3, #0
 80037c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_DMA_Start_IT+0x20>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e04b      	b.n	800386c <HAL_DMA_Start_IT+0xb8>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d13a      	bne.n	800385e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2202      	movs	r2, #2
 80037ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68b9      	ldr	r1, [r7, #8]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8e0 	bl	80039d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	2b00      	cmp	r3, #0
 8003818:	d008      	beq.n	800382c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f042 020e 	orr.w	r2, r2, #14
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e00f      	b.n	800384c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0204 	bic.w	r2, r2, #4
 800383a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 020a 	orr.w	r2, r2, #10
 800384a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	e005      	b.n	800386a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003866:	2302      	movs	r3, #2
 8003868:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800386a:	7dfb      	ldrb	r3, [r7, #23]
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003890:	f003 031c 	and.w	r3, r3, #28
 8003894:	2204      	movs	r2, #4
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d026      	beq.n	80038ee <HAL_DMA_IRQHandler+0x7a>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0304 	and.w	r3, r3, #4
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d021      	beq.n	80038ee <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d107      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f022 0204 	bic.w	r2, r2, #4
 80038c6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038cc:	f003 021c 	and.w	r2, r3, #28
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2104      	movs	r1, #4
 80038d6:	fa01 f202 	lsl.w	r2, r1, r2
 80038da:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d071      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038ec:	e06c      	b.n	80039c8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f003 031c 	and.w	r3, r3, #28
 80038f6:	2202      	movs	r2, #2
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02e      	beq.n	8003960 <HAL_DMA_IRQHandler+0xec>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d029      	beq.n	8003960 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 020a 	bic.w	r2, r2, #10
 8003928:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 021c 	and.w	r2, r3, #28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2102      	movs	r1, #2
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003952:	2b00      	cmp	r3, #0
 8003954:	d038      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800395e:	e033      	b.n	80039c8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003964:	f003 031c 	and.w	r3, r3, #28
 8003968:	2208      	movs	r2, #8
 800396a:	409a      	lsls	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02a      	beq.n	80039ca <HAL_DMA_IRQHandler+0x156>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d025      	beq.n	80039ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 020e 	bic.w	r2, r2, #14
 800398c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003992:	f003 021c 	and.w	r2, r3, #28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d004      	beq.n	80039ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
}
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f003 021c 	and.w	r2, r3, #28
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	2101      	movs	r1, #1
 80039ee:	fa01 f202 	lsl.w	r2, r1, r2
 80039f2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d108      	bne.n	8003a16 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a14:	e007      	b.n	8003a26 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68ba      	ldr	r2, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	60da      	str	r2, [r3, #12]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
	...

08003a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b087      	sub	sp, #28
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	e17f      	b.n	8003d44 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	2101      	movs	r1, #1
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8171 	beq.w	8003d3e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d00b      	beq.n	8003a7c <HAL_GPIO_Init+0x48>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d007      	beq.n	8003a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a70:	2b11      	cmp	r3, #17
 8003a72:	d003      	beq.n	8003a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b12      	cmp	r3, #18
 8003a7a:	d130      	bne.n	8003ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	2203      	movs	r2, #3
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	4013      	ands	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	43db      	mvns	r3, r3
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	091b      	lsrs	r3, r3, #4
 8003ac8:	f003 0201 	and.w	r2, r3, #1
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	693a      	ldr	r2, [r7, #16]
 8003adc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 0303 	and.w	r3, r3, #3
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d118      	bne.n	8003b1c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003af0:	2201      	movs	r2, #1
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	08db      	lsrs	r3, r3, #3
 8003b06:	f003 0201 	and.w	r2, r3, #1
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	2203      	movs	r2, #3
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4013      	ands	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d003      	beq.n	8003b5c <HAL_GPIO_Init+0x128>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d123      	bne.n	8003ba4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	220f      	movs	r2, #15
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f003 0307 	and.w	r3, r3, #7
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	08da      	lsrs	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3208      	adds	r2, #8
 8003b9e:	6939      	ldr	r1, [r7, #16]
 8003ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	2203      	movs	r2, #3
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	005b      	lsls	r3, r3, #1
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 80ac 	beq.w	8003d3e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be6:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <HAL_GPIO_Init+0x330>)
 8003be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bea:	4a5e      	ldr	r2, [pc, #376]	; (8003d64 <HAL_GPIO_Init+0x330>)
 8003bec:	f043 0301 	orr.w	r3, r3, #1
 8003bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf2:	4b5c      	ldr	r3, [pc, #368]	; (8003d64 <HAL_GPIO_Init+0x330>)
 8003bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	60bb      	str	r3, [r7, #8]
 8003bfc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bfe:	4a5a      	ldr	r2, [pc, #360]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	220f      	movs	r2, #15
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c28:	d025      	beq.n	8003c76 <HAL_GPIO_Init+0x242>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a4f      	ldr	r2, [pc, #316]	; (8003d6c <HAL_GPIO_Init+0x338>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d01f      	beq.n	8003c72 <HAL_GPIO_Init+0x23e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a4e      	ldr	r2, [pc, #312]	; (8003d70 <HAL_GPIO_Init+0x33c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d019      	beq.n	8003c6e <HAL_GPIO_Init+0x23a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a4d      	ldr	r2, [pc, #308]	; (8003d74 <HAL_GPIO_Init+0x340>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d013      	beq.n	8003c6a <HAL_GPIO_Init+0x236>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_GPIO_Init+0x344>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00d      	beq.n	8003c66 <HAL_GPIO_Init+0x232>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a4b      	ldr	r2, [pc, #300]	; (8003d7c <HAL_GPIO_Init+0x348>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d007      	beq.n	8003c62 <HAL_GPIO_Init+0x22e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a4a      	ldr	r2, [pc, #296]	; (8003d80 <HAL_GPIO_Init+0x34c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d101      	bne.n	8003c5e <HAL_GPIO_Init+0x22a>
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	e00c      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c5e:	2307      	movs	r3, #7
 8003c60:	e00a      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c62:	2305      	movs	r3, #5
 8003c64:	e008      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c66:	2304      	movs	r3, #4
 8003c68:	e006      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	e004      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e002      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <HAL_GPIO_Init+0x244>
 8003c76:	2300      	movs	r3, #0
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	f002 0203 	and.w	r2, r2, #3
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	4093      	lsls	r3, r2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c88:	4937      	ldr	r1, [pc, #220]	; (8003d68 <HAL_GPIO_Init+0x334>)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	3302      	adds	r3, #2
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c96:	4b3b      	ldr	r3, [pc, #236]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cba:	4a32      	ldr	r2, [pc, #200]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003cc0:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce4:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d003      	beq.n	8003d0e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4013      	ands	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d003      	beq.n	8003d38 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d38:	4a12      	ldr	r2, [pc, #72]	; (8003d84 <HAL_GPIO_Init+0x350>)
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	3301      	adds	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f47f ae78 	bne.w	8003a44 <HAL_GPIO_Init+0x10>
  }
}
 8003d54:	bf00      	nop
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	40021000 	.word	0x40021000
 8003d68:	40010000 	.word	0x40010000
 8003d6c:	48000400 	.word	0x48000400
 8003d70:	48000800 	.word	0x48000800
 8003d74:	48000c00 	.word	0x48000c00
 8003d78:	48001000 	.word	0x48001000
 8003d7c:	48001400 	.word	0x48001400
 8003d80:	48001800 	.word	0x48001800
 8003d84:	40010400 	.word	0x40010400

08003d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	807b      	strh	r3, [r7, #2]
 8003d94:	4613      	mov	r3, r2
 8003d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d98:	787b      	ldrb	r3, [r7, #1]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d9e:	887a      	ldrh	r2, [r7, #2]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003da4:	e002      	b.n	8003dac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003da6:	887a      	ldrh	r2, [r7, #2]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40007000 	.word	0x40007000

08003dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003de2:	d130      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003de4:	4b23      	ldr	r3, [pc, #140]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df0:	d038      	beq.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003df2:	4b20      	ldr	r3, [pc, #128]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dfa:	4a1e      	ldr	r2, [pc, #120]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2232      	movs	r2, #50	; 0x32
 8003e08:	fb02 f303 	mul.w	r3, r2, r3
 8003e0c:	4a1b      	ldr	r2, [pc, #108]	; (8003e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e12:	0c9b      	lsrs	r3, r3, #18
 8003e14:	3301      	adds	r3, #1
 8003e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e18:	e002      	b.n	8003e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d102      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1f2      	bne.n	8003e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e34:	4b0f      	ldr	r3, [pc, #60]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d110      	bne.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e00f      	b.n	8003e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e52:	d007      	beq.n	8003e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e54:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5c:	4a05      	ldr	r2, [pc, #20]	; (8003e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3714      	adds	r7, #20
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40007000 	.word	0x40007000
 8003e78:	2000003c 	.word	0x2000003c
 8003e7c:	431bde83 	.word	0x431bde83

08003e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b088      	sub	sp, #32
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e3d4      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e92:	4ba1      	ldr	r3, [pc, #644]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 030c 	and.w	r3, r3, #12
 8003e9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e9c:	4b9e      	ldr	r3, [pc, #632]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f003 0303 	and.w	r3, r3, #3
 8003ea4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80e4 	beq.w	800407c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d007      	beq.n	8003eca <HAL_RCC_OscConfig+0x4a>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	2b0c      	cmp	r3, #12
 8003ebe:	f040 808b 	bne.w	8003fd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 8087 	bne.w	8003fd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003eca:	4b93      	ldr	r3, [pc, #588]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d005      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x62>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e3ac      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1a      	ldr	r2, [r3, #32]
 8003ee6:	4b8c      	ldr	r3, [pc, #560]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d004      	beq.n	8003efc <HAL_RCC_OscConfig+0x7c>
 8003ef2:	4b89      	ldr	r3, [pc, #548]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003efa:	e005      	b.n	8003f08 <HAL_RCC_OscConfig+0x88>
 8003efc:	4b86      	ldr	r3, [pc, #536]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	091b      	lsrs	r3, r3, #4
 8003f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d223      	bcs.n	8003f54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd41 	bl	8004998 <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e38d      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f20:	4b7d      	ldr	r3, [pc, #500]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a7c      	ldr	r2, [pc, #496]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f26:	f043 0308 	orr.w	r3, r3, #8
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b7a      	ldr	r3, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	4977      	ldr	r1, [pc, #476]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f3e:	4b76      	ldr	r3, [pc, #472]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	4972      	ldr	r1, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
 8003f52:	e025      	b.n	8003fa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f54:	4b70      	ldr	r3, [pc, #448]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a6f      	ldr	r2, [pc, #444]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f5a:	f043 0308 	orr.w	r3, r3, #8
 8003f5e:	6013      	str	r3, [r2, #0]
 8003f60:	4b6d      	ldr	r3, [pc, #436]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
 8003f6c:	496a      	ldr	r1, [pc, #424]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f72:	4b69      	ldr	r3, [pc, #420]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	4965      	ldr	r1, [pc, #404]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fd01 	bl	8004998 <RCC_SetFlashLatencyFromMSIRange>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e34d      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fa0:	f000 fc36 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b5c      	ldr	r3, [pc, #368]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	091b      	lsrs	r3, r3, #4
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	495a      	ldr	r1, [pc, #360]	; (800411c <HAL_RCC_OscConfig+0x29c>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	f003 031f 	and.w	r3, r3, #31
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fbc:	4a58      	ldr	r2, [pc, #352]	; (8004120 <HAL_RCC_OscConfig+0x2a0>)
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003fc0:	4b58      	ldr	r3, [pc, #352]	; (8004124 <HAL_RCC_OscConfig+0x2a4>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe f801 	bl	8001fcc <HAL_InitTick>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d052      	beq.n	800407a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	e331      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d032      	beq.n	8004046 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fe0:	4b4d      	ldr	r3, [pc, #308]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fec:	f7fe f83e 	bl	800206c <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ff4:	f7fe f83a 	bl	800206c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e31a      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004006:	4b44      	ldr	r3, [pc, #272]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004012:	4b41      	ldr	r3, [pc, #260]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a40      	ldr	r2, [pc, #256]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	6013      	str	r3, [r2, #0]
 800401e:	4b3e      	ldr	r3, [pc, #248]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	493b      	ldr	r1, [pc, #236]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 800402c:	4313      	orrs	r3, r2
 800402e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004030:	4b39      	ldr	r3, [pc, #228]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	69db      	ldr	r3, [r3, #28]
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	4936      	ldr	r1, [pc, #216]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
 8004044:	e01a      	b.n	800407c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004046:	4b34      	ldr	r3, [pc, #208]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a33      	ldr	r2, [pc, #204]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 800404c:	f023 0301 	bic.w	r3, r3, #1
 8004050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004052:	f7fe f80b 	bl	800206c <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004058:	e008      	b.n	800406c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800405a:	f7fe f807 	bl	800206c <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	2b02      	cmp	r3, #2
 8004066:	d901      	bls.n	800406c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e2e7      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800406c:	4b2a      	ldr	r3, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d1f0      	bne.n	800405a <HAL_RCC_OscConfig+0x1da>
 8004078:	e000      	b.n	800407c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800407a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b00      	cmp	r3, #0
 8004086:	d074      	beq.n	8004172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d005      	beq.n	800409a <HAL_RCC_OscConfig+0x21a>
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b0c      	cmp	r3, #12
 8004092:	d10e      	bne.n	80040b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	2b03      	cmp	r3, #3
 8004098:	d10b      	bne.n	80040b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800409a:	4b1f      	ldr	r3, [pc, #124]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d064      	beq.n	8004170 <HAL_RCC_OscConfig+0x2f0>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d160      	bne.n	8004170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e2c4      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ba:	d106      	bne.n	80040ca <HAL_RCC_OscConfig+0x24a>
 80040bc:	4b16      	ldr	r3, [pc, #88]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a15      	ldr	r2, [pc, #84]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	e01d      	b.n	8004106 <HAL_RCC_OscConfig+0x286>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040d2:	d10c      	bne.n	80040ee <HAL_RCC_OscConfig+0x26e>
 80040d4:	4b10      	ldr	r3, [pc, #64]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a0f      	ldr	r2, [pc, #60]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b0d      	ldr	r3, [pc, #52]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0c      	ldr	r2, [pc, #48]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ea:	6013      	str	r3, [r2, #0]
 80040ec:	e00b      	b.n	8004106 <HAL_RCC_OscConfig+0x286>
 80040ee:	4b0a      	ldr	r3, [pc, #40]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040f8:	6013      	str	r3, [r2, #0]
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a06      	ldr	r2, [pc, #24]	; (8004118 <HAL_RCC_OscConfig+0x298>)
 8004100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004104:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d01c      	beq.n	8004148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410e:	f7fd ffad 	bl	800206c <HAL_GetTick>
 8004112:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004114:	e011      	b.n	800413a <HAL_RCC_OscConfig+0x2ba>
 8004116:	bf00      	nop
 8004118:	40021000 	.word	0x40021000
 800411c:	08007620 	.word	0x08007620
 8004120:	2000003c 	.word	0x2000003c
 8004124:	20000040 	.word	0x20000040
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004128:	f7fd ffa0 	bl	800206c <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b64      	cmp	r3, #100	; 0x64
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e280      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800413a:	4baf      	ldr	r3, [pc, #700]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d0f0      	beq.n	8004128 <HAL_RCC_OscConfig+0x2a8>
 8004146:	e014      	b.n	8004172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004148:	f7fd ff90 	bl	800206c <HAL_GetTick>
 800414c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800414e:	e008      	b.n	8004162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004150:	f7fd ff8c 	bl	800206c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	2b64      	cmp	r3, #100	; 0x64
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e26c      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004162:	4ba5      	ldr	r3, [pc, #660]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1f0      	bne.n	8004150 <HAL_RCC_OscConfig+0x2d0>
 800416e:	e000      	b.n	8004172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d060      	beq.n	8004240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b04      	cmp	r3, #4
 8004182:	d005      	beq.n	8004190 <HAL_RCC_OscConfig+0x310>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	2b0c      	cmp	r3, #12
 8004188:	d119      	bne.n	80041be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b02      	cmp	r3, #2
 800418e:	d116      	bne.n	80041be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004190:	4b99      	ldr	r3, [pc, #612]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_RCC_OscConfig+0x328>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e249      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041a8:	4b93      	ldr	r3, [pc, #588]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	4990      	ldr	r1, [pc, #576]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041bc:	e040      	b.n	8004240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d023      	beq.n	800420e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041c6:	4b8c      	ldr	r3, [pc, #560]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a8b      	ldr	r2, [pc, #556]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d2:	f7fd ff4b 	bl	800206c <HAL_GetTick>
 80041d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d8:	e008      	b.n	80041ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041da:	f7fd ff47 	bl	800206c <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	2b02      	cmp	r3, #2
 80041e6:	d901      	bls.n	80041ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041e8:	2303      	movs	r3, #3
 80041ea:	e227      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ec:	4b82      	ldr	r3, [pc, #520]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d0f0      	beq.n	80041da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f8:	4b7f      	ldr	r3, [pc, #508]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	061b      	lsls	r3, r3, #24
 8004206:	497c      	ldr	r1, [pc, #496]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004208:	4313      	orrs	r3, r2
 800420a:	604b      	str	r3, [r1, #4]
 800420c:	e018      	b.n	8004240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800420e:	4b7a      	ldr	r3, [pc, #488]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a79      	ldr	r2, [pc, #484]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd ff27 	bl	800206c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004222:	f7fd ff23 	bl	800206c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e203      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004234:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1f0      	bne.n	8004222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0308 	and.w	r3, r3, #8
 8004248:	2b00      	cmp	r3, #0
 800424a:	d03c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	695b      	ldr	r3, [r3, #20]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01c      	beq.n	800428e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004254:	4b68      	ldr	r3, [pc, #416]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800425a:	4a67      	ldr	r2, [pc, #412]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004264:	f7fd ff02 	bl	800206c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426c:	f7fd fefe 	bl	800206c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e1de      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800427e:	4b5e      	ldr	r3, [pc, #376]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0ef      	beq.n	800426c <HAL_RCC_OscConfig+0x3ec>
 800428c:	e01b      	b.n	80042c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800428e:	4b5a      	ldr	r3, [pc, #360]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004294:	4a58      	ldr	r2, [pc, #352]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004296:	f023 0301 	bic.w	r3, r3, #1
 800429a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd fee5 	bl	800206c <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042a4:	e008      	b.n	80042b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042a6:	f7fd fee1 	bl	800206c <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e1c1      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80042b8:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ef      	bne.n	80042a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	f000 80a6 	beq.w	8004420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042d4:	2300      	movs	r3, #0
 80042d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042d8:	4b47      	ldr	r3, [pc, #284]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80042da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10d      	bne.n	8004300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042e4:	4b44      	ldr	r3, [pc, #272]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e8:	4a43      	ldr	r2, [pc, #268]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80042ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ee:	6593      	str	r3, [r2, #88]	; 0x58
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042fc:	2301      	movs	r3, #1
 80042fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCC_OscConfig+0x57c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004308:	2b00      	cmp	r3, #0
 800430a:	d118      	bne.n	800433e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_OscConfig+0x57c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_RCC_OscConfig+0x57c>)
 8004312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004318:	f7fd fea8 	bl	800206c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004320:	f7fd fea4 	bl	800206c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b02      	cmp	r3, #2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e184      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004332:	4b32      	ldr	r3, [pc, #200]	; (80043fc <HAL_RCC_OscConfig+0x57c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800433a:	2b00      	cmp	r3, #0
 800433c:	d0f0      	beq.n	8004320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d108      	bne.n	8004358 <HAL_RCC_OscConfig+0x4d8>
 8004346:	4b2c      	ldr	r3, [pc, #176]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	4a2a      	ldr	r2, [pc, #168]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 800434e:	f043 0301 	orr.w	r3, r3, #1
 8004352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004356:	e024      	b.n	80043a2 <HAL_RCC_OscConfig+0x522>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	2b05      	cmp	r3, #5
 800435e:	d110      	bne.n	8004382 <HAL_RCC_OscConfig+0x502>
 8004360:	4b25      	ldr	r3, [pc, #148]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004366:	4a24      	ldr	r2, [pc, #144]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004368:	f043 0304 	orr.w	r3, r3, #4
 800436c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004376:	4a20      	ldr	r2, [pc, #128]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004380:	e00f      	b.n	80043a2 <HAL_RCC_OscConfig+0x522>
 8004382:	4b1d      	ldr	r3, [pc, #116]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004388:	4a1b      	ldr	r2, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 800438a:	f023 0301 	bic.w	r3, r3, #1
 800438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004392:	4b19      	ldr	r3, [pc, #100]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 8004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004398:	4a17      	ldr	r2, [pc, #92]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 800439a:	f023 0304 	bic.w	r3, r3, #4
 800439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d016      	beq.n	80043d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fd fe5f 	bl	800206c <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043b2:	f7fd fe5b 	bl	800206c <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e139      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043c8:	4b0b      	ldr	r3, [pc, #44]	; (80043f8 <HAL_RCC_OscConfig+0x578>)
 80043ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ed      	beq.n	80043b2 <HAL_RCC_OscConfig+0x532>
 80043d6:	e01a      	b.n	800440e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d8:	f7fd fe48 	bl	800206c <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043de:	e00f      	b.n	8004400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fd fe44 	bl	800206c <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d906      	bls.n	8004400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e122      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
 80043f6:	bf00      	nop
 80043f8:	40021000 	.word	0x40021000
 80043fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004400:	4b90      	ldr	r3, [pc, #576]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e8      	bne.n	80043e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d105      	bne.n	8004420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004414:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004418:	4a8a      	ldr	r2, [pc, #552]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 800441a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800441e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8108 	beq.w	800463a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	2b02      	cmp	r3, #2
 8004430:	f040 80d0 	bne.w	80045d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004434:	4b83      	ldr	r3, [pc, #524]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f003 0203 	and.w	r2, r3, #3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	429a      	cmp	r2, r3
 8004446:	d130      	bne.n	80044aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	3b01      	subs	r3, #1
 8004454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004456:	429a      	cmp	r2, r3
 8004458:	d127      	bne.n	80044aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004464:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d11f      	bne.n	80044aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004474:	2a07      	cmp	r2, #7
 8004476:	bf14      	ite	ne
 8004478:	2201      	movne	r2, #1
 800447a:	2200      	moveq	r2, #0
 800447c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447e:	4293      	cmp	r3, r2
 8004480:	d113      	bne.n	80044aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d109      	bne.n	80044aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d06e      	beq.n	8004588 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d069      	beq.n	8004584 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d105      	bne.n	80044c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80044bc:	4b61      	ldr	r3, [pc, #388]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0b7      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80044cc:	4b5d      	ldr	r3, [pc, #372]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a5c      	ldr	r2, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044d8:	f7fd fdc8 	bl	800206c <HAL_GetTick>
 80044dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044de:	e008      	b.n	80044f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e0:	f7fd fdc4 	bl	800206c <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0a4      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f2:	4b54      	ldr	r3, [pc, #336]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f0      	bne.n	80044e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044fe:	4b51      	ldr	r3, [pc, #324]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	4b51      	ldr	r3, [pc, #324]	; (8004648 <HAL_RCC_OscConfig+0x7c8>)
 8004504:	4013      	ands	r3, r2
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800450e:	3a01      	subs	r2, #1
 8004510:	0112      	lsls	r2, r2, #4
 8004512:	4311      	orrs	r1, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004518:	0212      	lsls	r2, r2, #8
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004520:	0852      	lsrs	r2, r2, #1
 8004522:	3a01      	subs	r2, #1
 8004524:	0552      	lsls	r2, r2, #21
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800452c:	0852      	lsrs	r2, r2, #1
 800452e:	3a01      	subs	r2, #1
 8004530:	0652      	lsls	r2, r2, #25
 8004532:	4311      	orrs	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004538:	0912      	lsrs	r2, r2, #4
 800453a:	0452      	lsls	r2, r2, #17
 800453c:	430a      	orrs	r2, r1
 800453e:	4941      	ldr	r1, [pc, #260]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004540:	4313      	orrs	r3, r2
 8004542:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004544:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a3e      	ldr	r2, [pc, #248]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 800454a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004550:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a3b      	ldr	r2, [pc, #236]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800455c:	f7fd fd86 	bl	800206c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fd fd82 	bl	800206c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e062      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	4b33      	ldr	r3, [pc, #204]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004582:	e05a      	b.n	800463a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e059      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004588:	4b2e      	ldr	r3, [pc, #184]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004590:	2b00      	cmp	r3, #0
 8004592:	d152      	bne.n	800463a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004594:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a2a      	ldr	r2, [pc, #168]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 800459a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045a0:	4b28      	ldr	r3, [pc, #160]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a27      	ldr	r2, [pc, #156]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045ac:	f7fd fd5e 	bl	800206c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b4:	f7fd fd5a 	bl	800206c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e03a      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	4b1f      	ldr	r3, [pc, #124]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0x734>
 80045d2:	e032      	b.n	800463a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	2b0c      	cmp	r3, #12
 80045d8:	d02d      	beq.n	8004636 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045da:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a19      	ldr	r2, [pc, #100]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80045e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80045e6:	4b17      	ldr	r3, [pc, #92]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d105      	bne.n	80045fe <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045f2:	4b14      	ldr	r3, [pc, #80]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4a13      	ldr	r2, [pc, #76]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 80045f8:	f023 0303 	bic.w	r3, r3, #3
 80045fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80045fe:	4b11      	ldr	r3, [pc, #68]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004600:	68db      	ldr	r3, [r3, #12]
 8004602:	4a10      	ldr	r2, [pc, #64]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 8004604:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800460c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fd fd2d 	bl	800206c <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004616:	f7fd fd29 	bl	800206c <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e009      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_RCC_OscConfig+0x7c4>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1f0      	bne.n	8004616 <HAL_RCC_OscConfig+0x796>
 8004634:	e001      	b.n	800463a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e000      	b.n	800463c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40021000 	.word	0x40021000
 8004648:	f99d808c 	.word	0xf99d808c

0800464c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e0c8      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	429a      	cmp	r2, r3
 800466c:	d910      	bls.n	8004690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800466e:	4b63      	ldr	r3, [pc, #396]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f023 0207 	bic.w	r2, r3, #7
 8004676:	4961      	ldr	r1, [pc, #388]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	4313      	orrs	r3, r2
 800467c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800467e:	4b5f      	ldr	r3, [pc, #380]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	429a      	cmp	r2, r3
 800468a:	d001      	beq.n	8004690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e0b0      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	2b00      	cmp	r3, #0
 800469a:	d04c      	beq.n	8004736 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d107      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046a4:	4b56      	ldr	r3, [pc, #344]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d121      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e09e      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d107      	bne.n	80046cc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80046bc:	4b50      	ldr	r3, [pc, #320]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d115      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e092      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80046d4:	4b4a      	ldr	r3, [pc, #296]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0302 	and.w	r3, r3, #2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e086      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80046e4:	4b46      	ldr	r3, [pc, #280]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e07e      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046f4:	4b42      	ldr	r3, [pc, #264]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f023 0203 	bic.w	r2, r3, #3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	493f      	ldr	r1, [pc, #252]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 8004702:	4313      	orrs	r3, r2
 8004704:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fd fcb1 	bl	800206c <HAL_GetTick>
 800470a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800470c:	e00a      	b.n	8004724 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800470e:	f7fd fcad 	bl	800206c <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e066      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004724:	4b36      	ldr	r3, [pc, #216]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 020c 	and.w	r2, r3, #12
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	429a      	cmp	r2, r3
 8004734:	d1eb      	bne.n	800470e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004742:	4b2f      	ldr	r3, [pc, #188]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	492c      	ldr	r1, [pc, #176]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004754:	4b29      	ldr	r3, [pc, #164]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d210      	bcs.n	8004784 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004762:	4b26      	ldr	r3, [pc, #152]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f023 0207 	bic.w	r2, r3, #7
 800476a:	4924      	ldr	r1, [pc, #144]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004772:	4b22      	ldr	r3, [pc, #136]	; (80047fc <HAL_RCC_ClockConfig+0x1b0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e036      	b.n	80047f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004790:	4b1b      	ldr	r3, [pc, #108]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4918      	ldr	r1, [pc, #96]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d009      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047ae:	4b14      	ldr	r3, [pc, #80]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	4910      	ldr	r1, [pc, #64]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047c2:	f000 f825 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 80047c6:	4602      	mov	r2, r0
 80047c8:	4b0d      	ldr	r3, [pc, #52]	; (8004800 <HAL_RCC_ClockConfig+0x1b4>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	490c      	ldr	r1, [pc, #48]	; (8004804 <HAL_RCC_ClockConfig+0x1b8>)
 80047d4:	5ccb      	ldrb	r3, [r1, r3]
 80047d6:	f003 031f 	and.w	r3, r3, #31
 80047da:	fa22 f303 	lsr.w	r3, r2, r3
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80047e2:	4b0a      	ldr	r3, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fd fbf0 	bl	8001fcc <HAL_InitTick>
 80047ec:	4603      	mov	r3, r0
 80047ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80047f0:	7afb      	ldrb	r3, [r7, #11]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40022000 	.word	0x40022000
 8004800:	40021000 	.word	0x40021000
 8004804:	08007620 	.word	0x08007620
 8004808:	2000003c 	.word	0x2000003c
 800480c:	20000040 	.word	0x20000040

08004810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	b089      	sub	sp, #36	; 0x24
 8004814:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004816:	2300      	movs	r3, #0
 8004818:	61fb      	str	r3, [r7, #28]
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800481e:	4b3e      	ldr	r3, [pc, #248]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004828:	4b3b      	ldr	r3, [pc, #236]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0303 	and.w	r3, r3, #3
 8004830:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d005      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0x34>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d121      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d11e      	bne.n	8004882 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0308 	and.w	r3, r3, #8
 800484c:	2b00      	cmp	r3, #0
 800484e:	d107      	bne.n	8004860 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004850:	4b31      	ldr	r3, [pc, #196]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004852:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004856:	0a1b      	lsrs	r3, r3, #8
 8004858:	f003 030f 	and.w	r3, r3, #15
 800485c:	61fb      	str	r3, [r7, #28]
 800485e:	e005      	b.n	800486c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004860:	4b2d      	ldr	r3, [pc, #180]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800486c:	4a2b      	ldr	r2, [pc, #172]	; (800491c <HAL_RCC_GetSysClockFreq+0x10c>)
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004874:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10d      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004880:	e00a      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b04      	cmp	r3, #4
 8004886:	d102      	bne.n	800488e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_GetSysClockFreq+0x110>)
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	e004      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d101      	bne.n	8004898 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004894:	4b23      	ldr	r3, [pc, #140]	; (8004924 <HAL_RCC_GetSysClockFreq+0x114>)
 8004896:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	2b0c      	cmp	r3, #12
 800489c:	d134      	bne.n	8004908 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800489e:	4b1e      	ldr	r3, [pc, #120]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d003      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0xac>
 80048b4:	e005      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_RCC_GetSysClockFreq+0x110>)
 80048b8:	617b      	str	r3, [r7, #20]
      break;
 80048ba:	e005      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_RCC_GetSysClockFreq+0x114>)
 80048be:	617b      	str	r3, [r7, #20]
      break;
 80048c0:	e002      	b.n	80048c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	617b      	str	r3, [r7, #20]
      break;
 80048c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048c8:	4b13      	ldr	r3, [pc, #76]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	091b      	lsrs	r3, r3, #4
 80048ce:	f003 0307 	and.w	r3, r3, #7
 80048d2:	3301      	adds	r3, #1
 80048d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80048d6:	4b10      	ldr	r3, [pc, #64]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	fb02 f203 	mul.w	r2, r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048ee:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	0e5b      	lsrs	r3, r3, #25
 80048f4:	f003 0303 	and.w	r3, r3, #3
 80048f8:	3301      	adds	r3, #1
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048fe:	697a      	ldr	r2, [r7, #20]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	fbb2 f3f3 	udiv	r3, r2, r3
 8004906:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004908:	69bb      	ldr	r3, [r7, #24]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3724      	adds	r7, #36	; 0x24
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000
 800491c:	08007638 	.word	0x08007638
 8004920:	00f42400 	.word	0x00f42400
 8004924:	007a1200 	.word	0x007a1200

08004928 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <HAL_RCC_GetHCLKFreq+0x14>)
 800492e:	681b      	ldr	r3, [r3, #0]
}
 8004930:	4618      	mov	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	2000003c 	.word	0x2000003c

08004940 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004944:	f7ff fff0 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004948:	4602      	mov	r2, r0
 800494a:	4b06      	ldr	r3, [pc, #24]	; (8004964 <HAL_RCC_GetPCLK1Freq+0x24>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	0a1b      	lsrs	r3, r3, #8
 8004950:	f003 0307 	and.w	r3, r3, #7
 8004954:	4904      	ldr	r1, [pc, #16]	; (8004968 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004956:	5ccb      	ldrb	r3, [r1, r3]
 8004958:	f003 031f 	and.w	r3, r3, #31
 800495c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004960:	4618      	mov	r0, r3
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40021000 	.word	0x40021000
 8004968:	08007630 	.word	0x08007630

0800496c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004970:	f7ff ffda 	bl	8004928 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	; (8004990 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	0adb      	lsrs	r3, r3, #11
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	; (8004994 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40021000 	.word	0x40021000
 8004994:	08007630 	.word	0x08007630

08004998 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049a0:	2300      	movs	r3, #0
 80049a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049a4:	4b2a      	ldr	r3, [pc, #168]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80049b0:	f7ff fa02 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 80049b4:	6178      	str	r0, [r7, #20]
 80049b6:	e014      	b.n	80049e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80049b8:	4b25      	ldr	r3, [pc, #148]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049bc:	4a24      	ldr	r2, [pc, #144]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c2:	6593      	str	r3, [r2, #88]	; 0x58
 80049c4:	4b22      	ldr	r3, [pc, #136]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049d0:	f7ff f9f2 	bl	8003db8 <HAL_PWREx_GetVoltageRange>
 80049d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049d6:	4b1e      	ldr	r3, [pc, #120]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e8:	d10b      	bne.n	8004a02 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b80      	cmp	r3, #128	; 0x80
 80049ee:	d919      	bls.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2ba0      	cmp	r3, #160	; 0xa0
 80049f4:	d902      	bls.n	80049fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f6:	2302      	movs	r3, #2
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	e013      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049fc:	2301      	movs	r3, #1
 80049fe:	613b      	str	r3, [r7, #16]
 8004a00:	e010      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b80      	cmp	r3, #128	; 0x80
 8004a06:	d902      	bls.n	8004a0e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a08:	2303      	movs	r3, #3
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e00a      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b80      	cmp	r3, #128	; 0x80
 8004a12:	d102      	bne.n	8004a1a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a14:	2302      	movs	r3, #2
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	e004      	b.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b70      	cmp	r3, #112	; 0x70
 8004a1e:	d101      	bne.n	8004a24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a20:	2301      	movs	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a24:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 0207 	bic.w	r2, r3, #7
 8004a2c:	4909      	ldr	r1, [pc, #36]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a34:	4b07      	ldr	r3, [pc, #28]	; (8004a54 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000
 8004a54:	40022000 	.word	0x40022000

08004a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a60:	2300      	movs	r3, #0
 8004a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a64:	2300      	movs	r3, #0
 8004a66:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d041      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a78:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a7c:	d02a      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a82:	d824      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a88:	d008      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a8e:	d81e      	bhi.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a98:	d010      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a9a:	e018      	b.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a9c:	4b86      	ldr	r3, [pc, #536]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	4a85      	ldr	r2, [pc, #532]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aa8:	e015      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f000 fabb 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aba:	e00c      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	3320      	adds	r3, #32
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f000 fba6 	bl	8005214 <RCCEx_PLLSAI2_Config>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004acc:	e003      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	74fb      	strb	r3, [r7, #19]
      break;
 8004ad2:	e000      	b.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ad4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ad6:	7cfb      	ldrb	r3, [r7, #19]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10b      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004adc:	4b76      	ldr	r3, [pc, #472]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aea:	4973      	ldr	r1, [pc, #460]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004af2:	e001      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af4:	7cfb      	ldrb	r3, [r7, #19]
 8004af6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d041      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b08:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b0c:	d02a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004b0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004b12:	d824      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b18:	d008      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b1e:	d81e      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b28:	d010      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b2a:	e018      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b2c:	4b62      	ldr	r3, [pc, #392]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	4a61      	ldr	r2, [pc, #388]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b36:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b38:	e015      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	2100      	movs	r1, #0
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 fa73 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b4a:	e00c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3320      	adds	r3, #32
 8004b50:	2100      	movs	r1, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fb5e 	bl	8005214 <RCCEx_PLLSAI2_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	74fb      	strb	r3, [r7, #19]
      break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b6c:	4b52      	ldr	r3, [pc, #328]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b7a:	494f      	ldr	r1, [pc, #316]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b82:	e001      	b.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b84:	7cfb      	ldrb	r3, [r7, #19]
 8004b86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a0 	beq.w	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b9a:	4b47      	ldr	r3, [pc, #284]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004baa:	2300      	movs	r3, #0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb0:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb4:	4a40      	ldr	r2, [pc, #256]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	6593      	str	r3, [r2, #88]	; 0x58
 8004bbc:	4b3e      	ldr	r3, [pc, #248]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bcc:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a3a      	ldr	r2, [pc, #232]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fa48 	bl	800206c <HAL_GetTick>
 8004bdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bde:	e009      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be0:	f7fd fa44 	bl	800206c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d902      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	74fb      	strb	r3, [r7, #19]
        break;
 8004bf2:	e005      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bf4:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d15c      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c06:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d01f      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d019      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c24:	4b24      	ldr	r3, [pc, #144]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c30:	4b21      	ldr	r3, [pc, #132]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c36:	4a20      	ldr	r2, [pc, #128]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c46:	4a1c      	ldr	r2, [pc, #112]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c50:	4a19      	ldr	r2, [pc, #100]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c62:	f7fd fa03 	bl	800206c <HAL_GetTick>
 8004c66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c68:	e00b      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd f9ff 	bl	800206c <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d902      	bls.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004c80:	e006      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ec      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ca6:	4904      	ldr	r1, [pc, #16]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004cae:	e009      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	74bb      	strb	r3, [r7, #18]
 8004cb4:	e006      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004cb6:	bf00      	nop
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cc0:	7cfb      	ldrb	r3, [r7, #19]
 8004cc2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc4:	7c7b      	ldrb	r3, [r7, #17]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b9e      	ldr	r3, [pc, #632]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cce:	4a9d      	ldr	r2, [pc, #628]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ce2:	4b98      	ldr	r3, [pc, #608]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce8:	f023 0203 	bic.w	r2, r3, #3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf0:	4994      	ldr	r1, [pc, #592]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0302 	and.w	r3, r3, #2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d04:	4b8f      	ldr	r3, [pc, #572]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0a:	f023 020c 	bic.w	r2, r3, #12
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	498c      	ldr	r1, [pc, #560]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0304 	and.w	r3, r3, #4
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d26:	4b87      	ldr	r3, [pc, #540]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	4983      	ldr	r1, [pc, #524]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d48:	4b7e      	ldr	r3, [pc, #504]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d56:	497b      	ldr	r1, [pc, #492]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d6a:	4b76      	ldr	r3, [pc, #472]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d78:	4972      	ldr	r1, [pc, #456]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d8c:	4b6d      	ldr	r3, [pc, #436]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9a:	496a      	ldr	r1, [pc, #424]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbc:	4961      	ldr	r1, [pc, #388]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004dd0:	4b5c      	ldr	r3, [pc, #368]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dde:	4959      	ldr	r1, [pc, #356]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004df2:	4b54      	ldr	r3, [pc, #336]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e00:	4950      	ldr	r1, [pc, #320]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e14:	4b4b      	ldr	r3, [pc, #300]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e22:	4948      	ldr	r1, [pc, #288]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e36:	4b43      	ldr	r3, [pc, #268]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	493f      	ldr	r1, [pc, #252]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d028      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e58:	4b3a      	ldr	r3, [pc, #232]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e66:	4937      	ldr	r1, [pc, #220]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e76:	d106      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e82:	60d3      	str	r3, [r2, #12]
 8004e84:	e011      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	2101      	movs	r1, #1
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f8c8 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d028      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004eb6:	4b23      	ldr	r3, [pc, #140]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec4:	491f      	ldr	r1, [pc, #124]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ed4:	d106      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed6:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed8:	68db      	ldr	r3, [r3, #12]
 8004eda:	4a1a      	ldr	r2, [pc, #104]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004edc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ee0:	60d3      	str	r3, [r2, #12]
 8004ee2:	e011      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f899 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02b      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f14:	4b0b      	ldr	r3, [pc, #44]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f22:	4908      	ldr	r1, [pc, #32]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f32:	d109      	bne.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	4a02      	ldr	r2, [pc, #8]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f3e:	60d3      	str	r3, [r2, #12]
 8004f40:	e014      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f50:	d10c      	bne.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3304      	adds	r3, #4
 8004f56:	2101      	movs	r1, #1
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f867 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f62:	7cfb      	ldrb	r3, [r7, #19]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d02f      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f78:	4b2b      	ldr	r3, [pc, #172]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f86:	4928      	ldr	r1, [pc, #160]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	2102      	movs	r1, #2
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f844 	bl	800502c <RCCEx_PLLSAI1_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d014      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fae:	7cfb      	ldrb	r3, [r7, #19]
 8004fb0:	74bb      	strb	r3, [r7, #18]
 8004fb2:	e011      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fbc:	d10c      	bne.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3320      	adds	r3, #32
 8004fc2:	2102      	movs	r1, #2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f000 f925 	bl	8005214 <RCCEx_PLLSAI2_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fce:	7cfb      	ldrb	r3, [r7, #19]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fd4:	7cfb      	ldrb	r3, [r7, #19]
 8004fd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fe4:	4b10      	ldr	r3, [pc, #64]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ff2:	490d      	ldr	r1, [pc, #52]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00b      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005006:	4b08      	ldr	r3, [pc, #32]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005016:	4904      	ldr	r1, [pc, #16]	; (8005028 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800501e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	40021000 	.word	0x40021000

0800502c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800503a:	4b75      	ldr	r3, [pc, #468]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d018      	beq.n	8005078 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005046:	4b72      	ldr	r3, [pc, #456]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f003 0203 	and.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	429a      	cmp	r2, r3
 8005054:	d10d      	bne.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
       ||
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800505e:	4b6c      	ldr	r3, [pc, #432]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	091b      	lsrs	r3, r3, #4
 8005064:	f003 0307 	and.w	r3, r3, #7
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
       ||
 800506e:	429a      	cmp	r2, r3
 8005070:	d047      	beq.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	73fb      	strb	r3, [r7, #15]
 8005076:	e044      	b.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b03      	cmp	r3, #3
 800507e:	d018      	beq.n	80050b2 <RCCEx_PLLSAI1_Config+0x86>
 8005080:	2b03      	cmp	r3, #3
 8005082:	d825      	bhi.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005084:	2b01      	cmp	r3, #1
 8005086:	d002      	beq.n	800508e <RCCEx_PLLSAI1_Config+0x62>
 8005088:	2b02      	cmp	r3, #2
 800508a:	d009      	beq.n	80050a0 <RCCEx_PLLSAI1_Config+0x74>
 800508c:	e020      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800508e:	4b60      	ldr	r3, [pc, #384]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0302 	and.w	r3, r3, #2
 8005096:	2b00      	cmp	r3, #0
 8005098:	d11d      	bne.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800509e:	e01a      	b.n	80050d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050a0:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d116      	bne.n	80050da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b0:	e013      	b.n	80050da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050b2:	4b57      	ldr	r3, [pc, #348]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050be:	4b54      	ldr	r3, [pc, #336]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d109      	bne.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050ce:	e006      	b.n	80050de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	73fb      	strb	r3, [r7, #15]
      break;
 80050d4:	e004      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050d6:	bf00      	nop
 80050d8:	e002      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050da:	bf00      	nop
 80050dc:	e000      	b.n	80050e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050de:	bf00      	nop
    }

    if(status == HAL_OK)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10d      	bne.n	8005102 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050e6:	4b4a      	ldr	r3, [pc, #296]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6819      	ldr	r1, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	011b      	lsls	r3, r3, #4
 80050fa:	430b      	orrs	r3, r1
 80050fc:	4944      	ldr	r1, [pc, #272]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d17d      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005108:	4b41      	ldr	r3, [pc, #260]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a40      	ldr	r2, [pc, #256]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005114:	f7fc ffaa 	bl	800206c <HAL_GetTick>
 8005118:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800511a:	e009      	b.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511c:	f7fc ffa6 	bl	800206c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	73fb      	strb	r3, [r7, #15]
        break;
 800512e:	e005      	b.n	800513c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005130:	4b37      	ldr	r3, [pc, #220]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1ef      	bne.n	800511c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d160      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d111      	bne.n	800516c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005148:	4b31      	ldr	r3, [pc, #196]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005150:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6892      	ldr	r2, [r2, #8]
 8005158:	0211      	lsls	r1, r2, #8
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	68d2      	ldr	r2, [r2, #12]
 800515e:	0912      	lsrs	r2, r2, #4
 8005160:	0452      	lsls	r2, r2, #17
 8005162:	430a      	orrs	r2, r1
 8005164:	492a      	ldr	r1, [pc, #168]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005166:	4313      	orrs	r3, r2
 8005168:	610b      	str	r3, [r1, #16]
 800516a:	e027      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d112      	bne.n	8005198 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005172:	4b27      	ldr	r3, [pc, #156]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800517a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	6892      	ldr	r2, [r2, #8]
 8005182:	0211      	lsls	r1, r2, #8
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	6912      	ldr	r2, [r2, #16]
 8005188:	0852      	lsrs	r2, r2, #1
 800518a:	3a01      	subs	r2, #1
 800518c:	0552      	lsls	r2, r2, #21
 800518e:	430a      	orrs	r2, r1
 8005190:	491f      	ldr	r1, [pc, #124]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005192:	4313      	orrs	r3, r2
 8005194:	610b      	str	r3, [r1, #16]
 8005196:	e011      	b.n	80051bc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005198:	4b1d      	ldr	r3, [pc, #116]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80051a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	6892      	ldr	r2, [r2, #8]
 80051a8:	0211      	lsls	r1, r2, #8
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6952      	ldr	r2, [r2, #20]
 80051ae:	0852      	lsrs	r2, r2, #1
 80051b0:	3a01      	subs	r2, #1
 80051b2:	0652      	lsls	r2, r2, #25
 80051b4:	430a      	orrs	r2, r1
 80051b6:	4916      	ldr	r1, [pc, #88]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051bc:	4b14      	ldr	r3, [pc, #80]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a13      	ldr	r2, [pc, #76]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c8:	f7fc ff50 	bl	800206c <HAL_GetTick>
 80051cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ce:	e009      	b.n	80051e4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051d0:	f7fc ff4c 	bl	800206c <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	2b02      	cmp	r3, #2
 80051dc:	d902      	bls.n	80051e4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051de:	2303      	movs	r3, #3
 80051e0:	73fb      	strb	r3, [r7, #15]
          break;
 80051e2:	e005      	b.n	80051f0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d0ef      	beq.n	80051d0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051f6:	4b06      	ldr	r3, [pc, #24]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	4904      	ldr	r1, [pc, #16]	; (8005210 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005200:	4313      	orrs	r3, r2
 8005202:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000

08005214 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005222:	4b6a      	ldr	r3, [pc, #424]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d018      	beq.n	8005260 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800522e:	4b67      	ldr	r3, [pc, #412]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0203 	and.w	r2, r3, #3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d10d      	bne.n	800525a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
       ||
 8005242:	2b00      	cmp	r3, #0
 8005244:	d009      	beq.n	800525a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005246:	4b61      	ldr	r3, [pc, #388]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	091b      	lsrs	r3, r3, #4
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	685b      	ldr	r3, [r3, #4]
       ||
 8005256:	429a      	cmp	r2, r3
 8005258:	d047      	beq.n	80052ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	73fb      	strb	r3, [r7, #15]
 800525e:	e044      	b.n	80052ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d018      	beq.n	800529a <RCCEx_PLLSAI2_Config+0x86>
 8005268:	2b03      	cmp	r3, #3
 800526a:	d825      	bhi.n	80052b8 <RCCEx_PLLSAI2_Config+0xa4>
 800526c:	2b01      	cmp	r3, #1
 800526e:	d002      	beq.n	8005276 <RCCEx_PLLSAI2_Config+0x62>
 8005270:	2b02      	cmp	r3, #2
 8005272:	d009      	beq.n	8005288 <RCCEx_PLLSAI2_Config+0x74>
 8005274:	e020      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005276:	4b55      	ldr	r3, [pc, #340]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d11d      	bne.n	80052be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005286:	e01a      	b.n	80052be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005288:	4b50      	ldr	r3, [pc, #320]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d116      	bne.n	80052c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005298:	e013      	b.n	80052c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800529a:	4b4c      	ldr	r3, [pc, #304]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10f      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052a6:	4b49      	ldr	r3, [pc, #292]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d109      	bne.n	80052c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052b6:	e006      	b.n	80052c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]
      break;
 80052bc:	e004      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052be:	bf00      	nop
 80052c0:	e002      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10d      	bne.n	80052ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052ce:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6819      	ldr	r1, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	3b01      	subs	r3, #1
 80052e0:	011b      	lsls	r3, r3, #4
 80052e2:	430b      	orrs	r3, r1
 80052e4:	4939      	ldr	r1, [pc, #228]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d167      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052f0:	4b36      	ldr	r3, [pc, #216]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a35      	ldr	r2, [pc, #212]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052fc:	f7fc feb6 	bl	800206c <HAL_GetTick>
 8005300:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005302:	e009      	b.n	8005318 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005304:	f7fc feb2 	bl	800206c <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d902      	bls.n	8005318 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	73fb      	strb	r3, [r7, #15]
        break;
 8005316:	e005      	b.n	8005324 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005318:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1ef      	bne.n	8005304 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005324:	7bfb      	ldrb	r3, [r7, #15]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d14a      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d111      	bne.n	8005354 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005330:	4b26      	ldr	r3, [pc, #152]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005332:	695b      	ldr	r3, [r3, #20]
 8005334:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6892      	ldr	r2, [r2, #8]
 8005340:	0211      	lsls	r1, r2, #8
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68d2      	ldr	r2, [r2, #12]
 8005346:	0912      	lsrs	r2, r2, #4
 8005348:	0452      	lsls	r2, r2, #17
 800534a:	430a      	orrs	r2, r1
 800534c:	491f      	ldr	r1, [pc, #124]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800534e:	4313      	orrs	r3, r2
 8005350:	614b      	str	r3, [r1, #20]
 8005352:	e011      	b.n	8005378 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005354:	4b1d      	ldr	r3, [pc, #116]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800535c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005360:	687a      	ldr	r2, [r7, #4]
 8005362:	6892      	ldr	r2, [r2, #8]
 8005364:	0211      	lsls	r1, r2, #8
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6912      	ldr	r2, [r2, #16]
 800536a:	0852      	lsrs	r2, r2, #1
 800536c:	3a01      	subs	r2, #1
 800536e:	0652      	lsls	r2, r2, #25
 8005370:	430a      	orrs	r2, r1
 8005372:	4916      	ldr	r1, [pc, #88]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005374:	4313      	orrs	r3, r2
 8005376:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005378:	4b14      	ldr	r3, [pc, #80]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a13      	ldr	r2, [pc, #76]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800537e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005382:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005384:	f7fc fe72 	bl	800206c <HAL_GetTick>
 8005388:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800538a:	e009      	b.n	80053a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800538c:	f7fc fe6e 	bl	800206c <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d902      	bls.n	80053a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	73fb      	strb	r3, [r7, #15]
          break;
 800539e:	e005      	b.n	80053ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80053a0:	4b0a      	ldr	r3, [pc, #40]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ef      	beq.n	800538c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80053ac:	7bfb      	ldrb	r3, [r7, #15]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d106      	bne.n	80053c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80053b2:	4b06      	ldr	r3, [pc, #24]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	4904      	ldr	r1, [pc, #16]	; (80053cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3710      	adds	r7, #16
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000

080053d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e049      	b.n	8005476 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d106      	bne.n	80053fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f7fc fce6 	bl	8001dc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f000 fd36 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b085      	sub	sp, #20
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b01      	cmp	r3, #1
 8005492:	d001      	beq.n	8005498 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e04f      	b.n	8005538 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	68da      	ldr	r2, [r3, #12]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0201 	orr.w	r2, r2, #1
 80054ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a23      	ldr	r2, [pc, #140]	; (8005544 <HAL_TIM_Base_Start_IT+0xc4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01d      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d018      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <HAL_TIM_Base_Start_IT+0xc8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <HAL_TIM_Base_Start_IT+0xcc>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00e      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1c      	ldr	r2, [pc, #112]	; (8005550 <HAL_TIM_Base_Start_IT+0xd0>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d009      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1b      	ldr	r2, [pc, #108]	; (8005554 <HAL_TIM_Base_Start_IT+0xd4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d004      	beq.n	80054f6 <HAL_TIM_Base_Start_IT+0x76>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a19      	ldr	r2, [pc, #100]	; (8005558 <HAL_TIM_Base_Start_IT+0xd8>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d115      	bne.n	8005522 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	4b17      	ldr	r3, [pc, #92]	; (800555c <HAL_TIM_Base_Start_IT+0xdc>)
 80054fe:	4013      	ands	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2b06      	cmp	r3, #6
 8005506:	d015      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0xb4>
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800550e:	d011      	beq.n	8005534 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005520:	e008      	b.n	8005534 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
 8005532:	e000      	b.n	8005536 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005534:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40000400 	.word	0x40000400
 800554c:	40000800 	.word	0x40000800
 8005550:	40000c00 	.word	0x40000c00
 8005554:	40013400 	.word	0x40013400
 8005558:	40014000 	.word	0x40014000
 800555c:	00010007 	.word	0x00010007

08005560 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e049      	b.n	8005606 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d106      	bne.n	800558c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f841 	bl	800560e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	3304      	adds	r3, #4
 800559c:	4619      	mov	r1, r3
 800559e:	4610      	mov	r0, r2
 80055a0:	f000 fc6e 	bl	8005e80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800560e:	b480      	push	{r7}
 8005610:	b083      	sub	sp, #12
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
	...

08005624 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d109      	bne.n	8005648 <HAL_TIM_PWM_Start+0x24>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b01      	cmp	r3, #1
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	e03c      	b.n	80056c2 <HAL_TIM_PWM_Start+0x9e>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b04      	cmp	r3, #4
 800564c:	d109      	bne.n	8005662 <HAL_TIM_PWM_Start+0x3e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b01      	cmp	r3, #1
 8005658:	bf14      	ite	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2300      	moveq	r3, #0
 800565e:	b2db      	uxtb	r3, r3
 8005660:	e02f      	b.n	80056c2 <HAL_TIM_PWM_Start+0x9e>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b08      	cmp	r3, #8
 8005666:	d109      	bne.n	800567c <HAL_TIM_PWM_Start+0x58>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b01      	cmp	r3, #1
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e022      	b.n	80056c2 <HAL_TIM_PWM_Start+0x9e>
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d109      	bne.n	8005696 <HAL_TIM_PWM_Start+0x72>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	e015      	b.n	80056c2 <HAL_TIM_PWM_Start+0x9e>
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b10      	cmp	r3, #16
 800569a:	d109      	bne.n	80056b0 <HAL_TIM_PWM_Start+0x8c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	bf14      	ite	ne
 80056a8:	2301      	movne	r3, #1
 80056aa:	2300      	moveq	r3, #0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	e008      	b.n	80056c2 <HAL_TIM_PWM_Start+0x9e>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e09c      	b.n	8005804 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d104      	bne.n	80056da <HAL_TIM_PWM_Start+0xb6>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d8:	e023      	b.n	8005722 <HAL_TIM_PWM_Start+0xfe>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b04      	cmp	r3, #4
 80056de:	d104      	bne.n	80056ea <HAL_TIM_PWM_Start+0xc6>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2202      	movs	r2, #2
 80056e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e8:	e01b      	b.n	8005722 <HAL_TIM_PWM_Start+0xfe>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d104      	bne.n	80056fa <HAL_TIM_PWM_Start+0xd6>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2202      	movs	r2, #2
 80056f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f8:	e013      	b.n	8005722 <HAL_TIM_PWM_Start+0xfe>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b0c      	cmp	r3, #12
 80056fe:	d104      	bne.n	800570a <HAL_TIM_PWM_Start+0xe6>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2202      	movs	r2, #2
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005708:	e00b      	b.n	8005722 <HAL_TIM_PWM_Start+0xfe>
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	2b10      	cmp	r3, #16
 800570e:	d104      	bne.n	800571a <HAL_TIM_PWM_Start+0xf6>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2202      	movs	r2, #2
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005718:	e003      	b.n	8005722 <HAL_TIM_PWM_Start+0xfe>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2201      	movs	r2, #1
 8005728:	6839      	ldr	r1, [r7, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 ffb2 	bl	8006694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a35      	ldr	r2, [pc, #212]	; (800580c <HAL_TIM_PWM_Start+0x1e8>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d013      	beq.n	8005762 <HAL_TIM_PWM_Start+0x13e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a34      	ldr	r2, [pc, #208]	; (8005810 <HAL_TIM_PWM_Start+0x1ec>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00e      	beq.n	8005762 <HAL_TIM_PWM_Start+0x13e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a32      	ldr	r2, [pc, #200]	; (8005814 <HAL_TIM_PWM_Start+0x1f0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d009      	beq.n	8005762 <HAL_TIM_PWM_Start+0x13e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a31      	ldr	r2, [pc, #196]	; (8005818 <HAL_TIM_PWM_Start+0x1f4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d004      	beq.n	8005762 <HAL_TIM_PWM_Start+0x13e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a2f      	ldr	r2, [pc, #188]	; (800581c <HAL_TIM_PWM_Start+0x1f8>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d101      	bne.n	8005766 <HAL_TIM_PWM_Start+0x142>
 8005762:	2301      	movs	r3, #1
 8005764:	e000      	b.n	8005768 <HAL_TIM_PWM_Start+0x144>
 8005766:	2300      	movs	r3, #0
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a22      	ldr	r2, [pc, #136]	; (800580c <HAL_TIM_PWM_Start+0x1e8>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d01d      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578e:	d018      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a22      	ldr	r2, [pc, #136]	; (8005820 <HAL_TIM_PWM_Start+0x1fc>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d013      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a21      	ldr	r2, [pc, #132]	; (8005824 <HAL_TIM_PWM_Start+0x200>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00e      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a1f      	ldr	r2, [pc, #124]	; (8005828 <HAL_TIM_PWM_Start+0x204>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d009      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a17      	ldr	r2, [pc, #92]	; (8005810 <HAL_TIM_PWM_Start+0x1ec>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d004      	beq.n	80057c2 <HAL_TIM_PWM_Start+0x19e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a15      	ldr	r2, [pc, #84]	; (8005814 <HAL_TIM_PWM_Start+0x1f0>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d115      	bne.n	80057ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	4b18      	ldr	r3, [pc, #96]	; (800582c <HAL_TIM_PWM_Start+0x208>)
 80057ca:	4013      	ands	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2b06      	cmp	r3, #6
 80057d2:	d015      	beq.n	8005800 <HAL_TIM_PWM_Start+0x1dc>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057da:	d011      	beq.n	8005800 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057ec:	e008      	b.n	8005800 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0201 	orr.w	r2, r2, #1
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e000      	b.n	8005802 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005800:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40012c00 	.word	0x40012c00
 8005810:	40013400 	.word	0x40013400
 8005814:	40014000 	.word	0x40014000
 8005818:	40014400 	.word	0x40014400
 800581c:	40014800 	.word	0x40014800
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	00010007 	.word	0x00010007

08005830 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b082      	sub	sp, #8
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d122      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d11b      	bne.n	800588c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f06f 0202 	mvn.w	r2, #2
 800585c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	f003 0303 	and.w	r3, r3, #3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d003      	beq.n	800587a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fae6 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
 8005878:	e005      	b.n	8005886 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fad8 	bl	8005e30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fae9 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	f003 0304 	and.w	r3, r3, #4
 8005896:	2b04      	cmp	r3, #4
 8005898:	d122      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
 80058a4:	2b04      	cmp	r3, #4
 80058a6:	d11b      	bne.n	80058e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f06f 0204 	mvn.w	r2, #4
 80058b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2202      	movs	r2, #2
 80058b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d003      	beq.n	80058ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fabc 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
 80058cc:	e005      	b.n	80058da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 faae 	bl	8005e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fabf 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b08      	cmp	r3, #8
 80058ec:	d122      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0308 	and.w	r3, r3, #8
 80058f8:	2b08      	cmp	r3, #8
 80058fa:	d11b      	bne.n	8005934 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f06f 0208 	mvn.w	r2, #8
 8005904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2204      	movs	r2, #4
 800590a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	69db      	ldr	r3, [r3, #28]
 8005912:	f003 0303 	and.w	r3, r3, #3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fa92 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
 8005920:	e005      	b.n	800592e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f000 fa84 	bl	8005e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fa95 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b10      	cmp	r3, #16
 8005940:	d122      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f003 0310 	and.w	r3, r3, #16
 800594c:	2b10      	cmp	r3, #16
 800594e:	d11b      	bne.n	8005988 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0210 	mvn.w	r2, #16
 8005958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2208      	movs	r2, #8
 800595e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fa68 	bl	8005e44 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fa5a 	bl	8005e30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa6b 	bl	8005e58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b01      	cmp	r3, #1
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0201 	mvn.w	r2, #1
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fa34 	bl	8005e1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059be:	2b80      	cmp	r3, #128	; 0x80
 80059c0:	d10e      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059cc:	2b80      	cmp	r3, #128	; 0x80
 80059ce:	d107      	bne.n	80059e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80059d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 ff90 	bl	8006900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ee:	d10e      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68db      	ldr	r3, [r3, #12]
 80059f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fa:	2b80      	cmp	r3, #128	; 0x80
 80059fc:	d107      	bne.n	8005a0e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 ff83 	bl	8006914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691b      	ldr	r3, [r3, #16]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d10e      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fa19 	bl	8005e6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	f003 0320 	and.w	r3, r3, #32
 8005a44:	2b20      	cmp	r3, #32
 8005a46:	d10e      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b20      	cmp	r3, #32
 8005a54:	d107      	bne.n	8005a66 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f06f 0220 	mvn.w	r2, #32
 8005a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 ff43 	bl	80068ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a66:	bf00      	nop
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a86:	2302      	movs	r3, #2
 8005a88:	e0fd      	b.n	8005c86 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b14      	cmp	r3, #20
 8005a96:	f200 80f0 	bhi.w	8005c7a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a9a:	a201      	add	r2, pc, #4	; (adr r2, 8005aa0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa0:	08005af5 	.word	0x08005af5
 8005aa4:	08005c7b 	.word	0x08005c7b
 8005aa8:	08005c7b 	.word	0x08005c7b
 8005aac:	08005c7b 	.word	0x08005c7b
 8005ab0:	08005b35 	.word	0x08005b35
 8005ab4:	08005c7b 	.word	0x08005c7b
 8005ab8:	08005c7b 	.word	0x08005c7b
 8005abc:	08005c7b 	.word	0x08005c7b
 8005ac0:	08005b77 	.word	0x08005b77
 8005ac4:	08005c7b 	.word	0x08005c7b
 8005ac8:	08005c7b 	.word	0x08005c7b
 8005acc:	08005c7b 	.word	0x08005c7b
 8005ad0:	08005bb7 	.word	0x08005bb7
 8005ad4:	08005c7b 	.word	0x08005c7b
 8005ad8:	08005c7b 	.word	0x08005c7b
 8005adc:	08005c7b 	.word	0x08005c7b
 8005ae0:	08005bf9 	.word	0x08005bf9
 8005ae4:	08005c7b 	.word	0x08005c7b
 8005ae8:	08005c7b 	.word	0x08005c7b
 8005aec:	08005c7b 	.word	0x08005c7b
 8005af0:	08005c39 	.word	0x08005c39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68b9      	ldr	r1, [r7, #8]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 fa5a 	bl	8005fb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0208 	orr.w	r2, r2, #8
 8005b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	699a      	ldr	r2, [r3, #24]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0204 	bic.w	r2, r2, #4
 8005b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6999      	ldr	r1, [r3, #24]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	430a      	orrs	r2, r1
 8005b30:	619a      	str	r2, [r3, #24]
      break;
 8005b32:	e0a3      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 faca 	bl	80060d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	699a      	ldr	r2, [r3, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6999      	ldr	r1, [r3, #24]
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	021a      	lsls	r2, r3, #8
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	430a      	orrs	r2, r1
 8005b72:	619a      	str	r2, [r3, #24]
      break;
 8005b74:	e082      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68b9      	ldr	r1, [r7, #8]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fb33 	bl	80061e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	69da      	ldr	r2, [r3, #28]
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f042 0208 	orr.w	r2, r2, #8
 8005b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	69da      	ldr	r2, [r3, #28]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0204 	bic.w	r2, r2, #4
 8005ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	69d9      	ldr	r1, [r3, #28]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	691a      	ldr	r2, [r3, #16]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	61da      	str	r2, [r3, #28]
      break;
 8005bb4:	e062      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68b9      	ldr	r1, [r7, #8]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fb9b 	bl	80062f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69d9      	ldr	r1, [r3, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	691b      	ldr	r3, [r3, #16]
 8005bec:	021a      	lsls	r2, r3, #8
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	430a      	orrs	r2, r1
 8005bf4:	61da      	str	r2, [r3, #28]
      break;
 8005bf6:	e041      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68b9      	ldr	r1, [r7, #8]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f000 fbe4 	bl	80063cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f022 0204 	bic.w	r2, r2, #4
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	691a      	ldr	r2, [r3, #16]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c36:	e021      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68b9      	ldr	r1, [r7, #8]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fc28 	bl	8006494 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	021a      	lsls	r2, r3, #8
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c78:	e000      	b.n	8005c7c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005c7a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop

08005c90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIM_ConfigClockSource+0x18>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e0b5      	b.n	8005e14 <HAL_TIM_ConfigClockSource+0x184>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce4:	d03e      	beq.n	8005d64 <HAL_TIM_ConfigClockSource+0xd4>
 8005ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cea:	f200 8087 	bhi.w	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf2:	f000 8085 	beq.w	8005e00 <HAL_TIM_ConfigClockSource+0x170>
 8005cf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfa:	d87f      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b70      	cmp	r3, #112	; 0x70
 8005cfe:	d01a      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0xa6>
 8005d00:	2b70      	cmp	r3, #112	; 0x70
 8005d02:	d87b      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b60      	cmp	r3, #96	; 0x60
 8005d06:	d050      	beq.n	8005daa <HAL_TIM_ConfigClockSource+0x11a>
 8005d08:	2b60      	cmp	r3, #96	; 0x60
 8005d0a:	d877      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b50      	cmp	r3, #80	; 0x50
 8005d0e:	d03c      	beq.n	8005d8a <HAL_TIM_ConfigClockSource+0xfa>
 8005d10:	2b50      	cmp	r3, #80	; 0x50
 8005d12:	d873      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	d058      	beq.n	8005dca <HAL_TIM_ConfigClockSource+0x13a>
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d86f      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d1c:	2b30      	cmp	r3, #48	; 0x30
 8005d1e:	d064      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d86b      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d060      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d867      	bhi.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d05c      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
 8005d30:	2b10      	cmp	r3, #16
 8005d32:	d05a      	beq.n	8005dea <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005d34:	e062      	b.n	8005dfc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f000 fc85 	bl	8006654 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	609a      	str	r2, [r3, #8]
      break;
 8005d62:	e04e      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6899      	ldr	r1, [r3, #8]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685a      	ldr	r2, [r3, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	f000 fc6e 	bl	8006654 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d86:	609a      	str	r2, [r3, #8]
      break;
 8005d88:	e03b      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	6859      	ldr	r1, [r3, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	461a      	mov	r2, r3
 8005d98:	f000 fbe2 	bl	8006560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2150      	movs	r1, #80	; 0x50
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc3b 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005da8:	e02b      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6818      	ldr	r0, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6859      	ldr	r1, [r3, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f000 fc01 	bl	80065be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2160      	movs	r1, #96	; 0x60
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 fc2b 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e01b      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	6859      	ldr	r1, [r3, #4]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	68db      	ldr	r3, [r3, #12]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	f000 fbc2 	bl	8006560 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2140      	movs	r1, #64	; 0x40
 8005de2:	4618      	mov	r0, r3
 8005de4:	f000 fc1b 	bl	800661e <TIM_ITRx_SetConfig>
      break;
 8005de8:	e00b      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f000 fc12 	bl	800661e <TIM_ITRx_SetConfig>
        break;
 8005dfa:	e002      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005e00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e38:	bf00      	nop
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e4c:	bf00      	nop
 8005e4e:	370c      	adds	r7, #12
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a40      	ldr	r2, [pc, #256]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d013      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	4a3d      	ldr	r2, [pc, #244]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a3c      	ldr	r2, [pc, #240]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a3b      	ldr	r2, [pc, #236]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x40>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a3a      	ldr	r2, [pc, #232]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a2f      	ldr	r2, [pc, #188]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01f      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d01b      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a2c      	ldr	r2, [pc, #176]	; (8005f98 <TIM_Base_SetConfig+0x118>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d017      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a2b      	ldr	r2, [pc, #172]	; (8005f9c <TIM_Base_SetConfig+0x11c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d013      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a2a      	ldr	r2, [pc, #168]	; (8005fa0 <TIM_Base_SetConfig+0x120>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00f      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a29      	ldr	r2, [pc, #164]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00b      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a28      	ldr	r2, [pc, #160]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d007      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <TIM_Base_SetConfig+0x9a>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a26      	ldr	r2, [pc, #152]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d108      	bne.n	8005f2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	68fa      	ldr	r2, [r7, #12]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a10      	ldr	r2, [pc, #64]	; (8005f94 <TIM_Base_SetConfig+0x114>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d00f      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	4a12      	ldr	r2, [pc, #72]	; (8005fa4 <TIM_Base_SetConfig+0x124>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d00b      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a11      	ldr	r2, [pc, #68]	; (8005fa8 <TIM_Base_SetConfig+0x128>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d007      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a10      	ldr	r2, [pc, #64]	; (8005fac <TIM_Base_SetConfig+0x12c>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d003      	beq.n	8005f78 <TIM_Base_SetConfig+0xf8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a0f      	ldr	r2, [pc, #60]	; (8005fb0 <TIM_Base_SetConfig+0x130>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d103      	bne.n	8005f80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	691a      	ldr	r2, [r3, #16]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	615a      	str	r2, [r3, #20]
}
 8005f86:	bf00      	nop
 8005f88:	3714      	adds	r7, #20
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40000400 	.word	0x40000400
 8005f9c:	40000800 	.word	0x40000800
 8005fa0:	40000c00 	.word	0x40000c00
 8005fa4:	40013400 	.word	0x40013400
 8005fa8:	40014000 	.word	0x40014000
 8005fac:	40014400 	.word	0x40014400
 8005fb0:	40014800 	.word	0x40014800

08005fb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a1b      	ldr	r3, [r3, #32]
 8005fc2:	f023 0201 	bic.w	r2, r3, #1
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f023 0302 	bic.w	r3, r3, #2
 8006000:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	4313      	orrs	r3, r2
 800600a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <TIM_OC1_SetConfig+0x10c>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a2b      	ldr	r2, [pc, #172]	; (80060c4 <TIM_OC1_SetConfig+0x110>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a2a      	ldr	r2, [pc, #168]	; (80060c8 <TIM_OC1_SetConfig+0x114>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a29      	ldr	r2, [pc, #164]	; (80060cc <TIM_OC1_SetConfig+0x118>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC1_SetConfig+0x80>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a28      	ldr	r2, [pc, #160]	; (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d10c      	bne.n	800604e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f023 0308 	bic.w	r3, r3, #8
 800603a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f023 0304 	bic.w	r3, r3, #4
 800604c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <TIM_OC1_SetConfig+0x10c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d00f      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a1a      	ldr	r2, [pc, #104]	; (80060c4 <TIM_OC1_SetConfig+0x110>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a19      	ldr	r2, [pc, #100]	; (80060c8 <TIM_OC1_SetConfig+0x114>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a18      	ldr	r2, [pc, #96]	; (80060cc <TIM_OC1_SetConfig+0x118>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_OC1_SetConfig+0xc2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a17      	ldr	r2, [pc, #92]	; (80060d0 <TIM_OC1_SetConfig+0x11c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d111      	bne.n	800609a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800607c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006084:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800

080060d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b087      	sub	sp, #28
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0210 	bic.w	r2, r3, #16
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800610e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	021b      	lsls	r3, r3, #8
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	f023 0320 	bic.w	r3, r3, #32
 8006122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	011b      	lsls	r3, r3, #4
 800612a:	697a      	ldr	r2, [r7, #20]
 800612c:	4313      	orrs	r3, r2
 800612e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a28      	ldr	r2, [pc, #160]	; (80061d4 <TIM_OC2_SetConfig+0x100>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d003      	beq.n	8006140 <TIM_OC2_SetConfig+0x6c>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a27      	ldr	r2, [pc, #156]	; (80061d8 <TIM_OC2_SetConfig+0x104>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d10d      	bne.n	800615c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <TIM_OC2_SetConfig+0x100>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d00f      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <TIM_OC2_SetConfig+0x104>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00b      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1b      	ldr	r2, [pc, #108]	; (80061dc <TIM_OC2_SetConfig+0x108>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d007      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	4a1a      	ldr	r2, [pc, #104]	; (80061e0 <TIM_OC2_SetConfig+0x10c>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d003      	beq.n	8006184 <TIM_OC2_SetConfig+0xb0>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <TIM_OC2_SetConfig+0x110>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d113      	bne.n	80061ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800618a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006192:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	693a      	ldr	r2, [r7, #16]
 800619c:	4313      	orrs	r3, r2
 800619e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	699b      	ldr	r3, [r3, #24]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	693a      	ldr	r2, [r7, #16]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40013400 	.word	0x40013400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f023 0303 	bic.w	r3, r3, #3
 8006222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	68fa      	ldr	r2, [r7, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	021b      	lsls	r3, r3, #8
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	4313      	orrs	r3, r2
 8006240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a27      	ldr	r2, [pc, #156]	; (80062e4 <TIM_OC3_SetConfig+0xfc>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_OC3_SetConfig+0x6a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a26      	ldr	r2, [pc, #152]	; (80062e8 <TIM_OC3_SetConfig+0x100>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d10d      	bne.n	800626e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800626c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a1c      	ldr	r2, [pc, #112]	; (80062e4 <TIM_OC3_SetConfig+0xfc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d00f      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1b      	ldr	r2, [pc, #108]	; (80062e8 <TIM_OC3_SetConfig+0x100>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00b      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1a      	ldr	r2, [pc, #104]	; (80062ec <TIM_OC3_SetConfig+0x104>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d007      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a19      	ldr	r2, [pc, #100]	; (80062f0 <TIM_OC3_SetConfig+0x108>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d003      	beq.n	8006296 <TIM_OC3_SetConfig+0xae>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a18      	ldr	r2, [pc, #96]	; (80062f4 <TIM_OC3_SetConfig+0x10c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d113      	bne.n	80062be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800629c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	011b      	lsls	r3, r3, #4
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	693a      	ldr	r2, [r7, #16]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	621a      	str	r2, [r3, #32]
}
 80062d8:	bf00      	nop
 80062da:	371c      	adds	r7, #28
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	40012c00 	.word	0x40012c00
 80062e8:	40013400 	.word	0x40013400
 80062ec:	40014000 	.word	0x40014000
 80062f0:	40014400 	.word	0x40014400
 80062f4:	40014800 	.word	0x40014800

080062f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b087      	sub	sp, #28
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	69db      	ldr	r3, [r3, #28]
 800631e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	021b      	lsls	r3, r3, #8
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4313      	orrs	r3, r2
 800633e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	031b      	lsls	r3, r3, #12
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4313      	orrs	r3, r2
 8006352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a18      	ldr	r2, [pc, #96]	; (80063b8 <TIM_OC4_SetConfig+0xc0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00f      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a17      	ldr	r2, [pc, #92]	; (80063bc <TIM_OC4_SetConfig+0xc4>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d00b      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a16      	ldr	r2, [pc, #88]	; (80063c0 <TIM_OC4_SetConfig+0xc8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a15      	ldr	r2, [pc, #84]	; (80063c4 <TIM_OC4_SetConfig+0xcc>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC4_SetConfig+0x84>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <TIM_OC4_SetConfig+0xd0>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d109      	bne.n	8006390 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
 8006388:	019b      	lsls	r3, r3, #6
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	bf00      	nop
 80063ac:	371c      	adds	r7, #28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40014000 	.word	0x40014000
 80063c4:	40014400 	.word	0x40014400
 80063c8:	40014800 	.word	0x40014800

080063cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006410:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	041b      	lsls	r3, r3, #16
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a17      	ldr	r2, [pc, #92]	; (8006480 <TIM_OC5_SetConfig+0xb4>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d00f      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a16      	ldr	r2, [pc, #88]	; (8006484 <TIM_OC5_SetConfig+0xb8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d00b      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a15      	ldr	r2, [pc, #84]	; (8006488 <TIM_OC5_SetConfig+0xbc>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d007      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a14      	ldr	r2, [pc, #80]	; (800648c <TIM_OC5_SetConfig+0xc0>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d003      	beq.n	8006446 <TIM_OC5_SetConfig+0x7a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a13      	ldr	r2, [pc, #76]	; (8006490 <TIM_OC5_SetConfig+0xc4>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d109      	bne.n	800645a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	697a      	ldr	r2, [r7, #20]
 8006456:	4313      	orrs	r3, r2
 8006458:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	621a      	str	r2, [r3, #32]
}
 8006474:	bf00      	nop
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40012c00 	.word	0x40012c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1b      	ldr	r3, [r3, #32]
 80064a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80064c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	051b      	lsls	r3, r3, #20
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a18      	ldr	r2, [pc, #96]	; (800654c <TIM_OC6_SetConfig+0xb8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00f      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <TIM_OC6_SetConfig+0xbc>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d00b      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a16      	ldr	r2, [pc, #88]	; (8006554 <TIM_OC6_SetConfig+0xc0>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d007      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <TIM_OC6_SetConfig+0xc4>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d003      	beq.n	8006510 <TIM_OC6_SetConfig+0x7c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <TIM_OC6_SetConfig+0xc8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d109      	bne.n	8006524 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006516:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	697a      	ldr	r2, [r7, #20]
 8006528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	621a      	str	r2, [r3, #32]
}
 800653e:	bf00      	nop
 8006540:	371c      	adds	r7, #28
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40012c00 	.word	0x40012c00
 8006550:	40013400 	.word	0x40013400
 8006554:	40014000 	.word	0x40014000
 8006558:	40014400 	.word	0x40014400
 800655c:	40014800 	.word	0x40014800

08006560 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006560:	b480      	push	{r7}
 8006562:	b087      	sub	sp, #28
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6a1b      	ldr	r3, [r3, #32]
 8006576:	f023 0201 	bic.w	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006584:	693b      	ldr	r3, [r7, #16]
 8006586:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800658a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	011b      	lsls	r3, r3, #4
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f023 030a 	bic.w	r3, r3, #10
 800659c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	697a      	ldr	r2, [r7, #20]
 80065b0:	621a      	str	r2, [r3, #32]
}
 80065b2:	bf00      	nop
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065be:	b480      	push	{r7}
 80065c0:	b087      	sub	sp, #28
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	60f8      	str	r0, [r7, #12]
 80065c6:	60b9      	str	r1, [r7, #8]
 80065c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	f023 0210 	bic.w	r2, r3, #16
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4313      	orrs	r3, r2
 8006604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	621a      	str	r2, [r3, #32]
}
 8006612:	bf00      	nop
 8006614:	371c      	adds	r7, #28
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800661e:	b480      	push	{r7}
 8006620:	b085      	sub	sp, #20
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006636:	683a      	ldr	r2, [r7, #0]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4313      	orrs	r3, r2
 800663c:	f043 0307 	orr.w	r3, r3, #7
 8006640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	609a      	str	r2, [r3, #8]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006654:	b480      	push	{r7}
 8006656:	b087      	sub	sp, #28
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	607a      	str	r2, [r7, #4]
 8006660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	021a      	lsls	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	431a      	orrs	r2, r3
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	4313      	orrs	r3, r2
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	371c      	adds	r7, #28
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	f003 031f 	and.w	r3, r3, #31
 80066a6:	2201      	movs	r2, #1
 80066a8:	fa02 f303 	lsl.w	r3, r2, r3
 80066ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a1a      	ldr	r2, [r3, #32]
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	43db      	mvns	r3, r3
 80066b6:	401a      	ands	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6a1a      	ldr	r2, [r3, #32]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 031f 	and.w	r3, r3, #31
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	fa01 f303 	lsl.w	r3, r1, r3
 80066cc:	431a      	orrs	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	621a      	str	r2, [r3, #32]
}
 80066d2:	bf00      	nop
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
	...

080066e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b085      	sub	sp, #20
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e068      	b.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	689b      	ldr	r3, [r3, #8]
 8006716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a2e      	ldr	r2, [pc, #184]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d108      	bne.n	800673e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006744:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	4313      	orrs	r3, r2
 800674e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1e      	ldr	r2, [pc, #120]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01d      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676a:	d018      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a1b      	ldr	r2, [pc, #108]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d013      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00e      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a18      	ldr	r2, [pc, #96]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d009      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a13      	ldr	r2, [pc, #76]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d004      	beq.n	800679e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a14      	ldr	r2, [pc, #80]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d10c      	bne.n	80067b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	40012c00 	.word	0x40012c00
 80067dc:	40013400 	.word	0x40013400
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40000c00 	.word	0x40000c00
 80067ec:	40014000 	.word	0x40014000

080067f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006804:	2b01      	cmp	r3, #1
 8006806:	d101      	bne.n	800680c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006808:	2302      	movs	r3, #2
 800680a:	e065      	b.n	80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	4313      	orrs	r3, r2
 8006820:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4313      	orrs	r3, r2
 800683c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006872:	4313      	orrs	r3, r2
 8006874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	041b      	lsls	r3, r3, #16
 8006882:	4313      	orrs	r3, r2
 8006884:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a16      	ldr	r2, [pc, #88]	; (80068e4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a14      	ldr	r2, [pc, #80]	; (80068e8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d115      	bne.n	80068c6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a4:	051b      	lsls	r3, r3, #20
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3714      	adds	r7, #20
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr
 80068e4:	40012c00 	.word	0x40012c00
 80068e8:	40013400 	.word	0x40013400

080068ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e040      	b.n	80069bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f7fb fadc 	bl	8001f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2224      	movs	r2, #36	; 0x24
 8006954:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0201 	bic.w	r2, r2, #1
 8006964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f82c 	bl	80069c4 <UART_SetConfig>
 800696c:	4603      	mov	r3, r0
 800696e:	2b01      	cmp	r3, #1
 8006970:	d101      	bne.n	8006976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e022      	b.n	80069bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	d002      	beq.n	8006984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f000 faaa 	bl	8006ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685a      	ldr	r2, [r3, #4]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689a      	ldr	r2, [r3, #8]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f042 0201 	orr.w	r2, r2, #1
 80069b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fb31 	bl	800701c <UART_CheckIdleState>
 80069ba:	4603      	mov	r3, r0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069c4:	b5b0      	push	{r4, r5, r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069cc:	2300      	movs	r3, #0
 80069ce:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69db      	ldr	r3, [r3, #28]
 80069e4:	4313      	orrs	r3, r2
 80069e6:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4bad      	ldr	r3, [pc, #692]	; (8006ca4 <UART_SetConfig+0x2e0>)
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	69f9      	ldr	r1, [r7, #28]
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68da      	ldr	r2, [r3, #12]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4aa2      	ldr	r2, [pc, #648]	; (8006ca8 <UART_SetConfig+0x2e4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	689b      	ldr	r3, [r3, #8]
 8006a32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69fa      	ldr	r2, [r7, #28]
 8006a3c:	430a      	orrs	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a99      	ldr	r2, [pc, #612]	; (8006cac <UART_SetConfig+0x2e8>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d121      	bne.n	8006a8e <UART_SetConfig+0xca>
 8006a4a:	4b99      	ldr	r3, [pc, #612]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d817      	bhi.n	8006a88 <UART_SetConfig+0xc4>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <UART_SetConfig+0x9c>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a7d 	.word	0x08006a7d
 8006a68:	08006a77 	.word	0x08006a77
 8006a6c:	08006a83 	.word	0x08006a83
 8006a70:	2301      	movs	r3, #1
 8006a72:	76fb      	strb	r3, [r7, #27]
 8006a74:	e0e7      	b.n	8006c46 <UART_SetConfig+0x282>
 8006a76:	2302      	movs	r3, #2
 8006a78:	76fb      	strb	r3, [r7, #27]
 8006a7a:	e0e4      	b.n	8006c46 <UART_SetConfig+0x282>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	76fb      	strb	r3, [r7, #27]
 8006a80:	e0e1      	b.n	8006c46 <UART_SetConfig+0x282>
 8006a82:	2308      	movs	r3, #8
 8006a84:	76fb      	strb	r3, [r7, #27]
 8006a86:	e0de      	b.n	8006c46 <UART_SetConfig+0x282>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	76fb      	strb	r3, [r7, #27]
 8006a8c:	e0db      	b.n	8006c46 <UART_SetConfig+0x282>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a88      	ldr	r2, [pc, #544]	; (8006cb4 <UART_SetConfig+0x2f0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d132      	bne.n	8006afe <UART_SetConfig+0x13a>
 8006a98:	4b85      	ldr	r3, [pc, #532]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9e:	f003 030c 	and.w	r3, r3, #12
 8006aa2:	2b0c      	cmp	r3, #12
 8006aa4:	d828      	bhi.n	8006af8 <UART_SetConfig+0x134>
 8006aa6:	a201      	add	r2, pc, #4	; (adr r2, 8006aac <UART_SetConfig+0xe8>)
 8006aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aac:	08006ae1 	.word	0x08006ae1
 8006ab0:	08006af9 	.word	0x08006af9
 8006ab4:	08006af9 	.word	0x08006af9
 8006ab8:	08006af9 	.word	0x08006af9
 8006abc:	08006aed 	.word	0x08006aed
 8006ac0:	08006af9 	.word	0x08006af9
 8006ac4:	08006af9 	.word	0x08006af9
 8006ac8:	08006af9 	.word	0x08006af9
 8006acc:	08006ae7 	.word	0x08006ae7
 8006ad0:	08006af9 	.word	0x08006af9
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006af9 	.word	0x08006af9
 8006adc:	08006af3 	.word	0x08006af3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	76fb      	strb	r3, [r7, #27]
 8006ae4:	e0af      	b.n	8006c46 <UART_SetConfig+0x282>
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	76fb      	strb	r3, [r7, #27]
 8006aea:	e0ac      	b.n	8006c46 <UART_SetConfig+0x282>
 8006aec:	2304      	movs	r3, #4
 8006aee:	76fb      	strb	r3, [r7, #27]
 8006af0:	e0a9      	b.n	8006c46 <UART_SetConfig+0x282>
 8006af2:	2308      	movs	r3, #8
 8006af4:	76fb      	strb	r3, [r7, #27]
 8006af6:	e0a6      	b.n	8006c46 <UART_SetConfig+0x282>
 8006af8:	2310      	movs	r3, #16
 8006afa:	76fb      	strb	r3, [r7, #27]
 8006afc:	e0a3      	b.n	8006c46 <UART_SetConfig+0x282>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6d      	ldr	r2, [pc, #436]	; (8006cb8 <UART_SetConfig+0x2f4>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d120      	bne.n	8006b4a <UART_SetConfig+0x186>
 8006b08:	4b69      	ldr	r3, [pc, #420]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b12:	2b30      	cmp	r3, #48	; 0x30
 8006b14:	d013      	beq.n	8006b3e <UART_SetConfig+0x17a>
 8006b16:	2b30      	cmp	r3, #48	; 0x30
 8006b18:	d814      	bhi.n	8006b44 <UART_SetConfig+0x180>
 8006b1a:	2b20      	cmp	r3, #32
 8006b1c:	d009      	beq.n	8006b32 <UART_SetConfig+0x16e>
 8006b1e:	2b20      	cmp	r3, #32
 8006b20:	d810      	bhi.n	8006b44 <UART_SetConfig+0x180>
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d002      	beq.n	8006b2c <UART_SetConfig+0x168>
 8006b26:	2b10      	cmp	r3, #16
 8006b28:	d006      	beq.n	8006b38 <UART_SetConfig+0x174>
 8006b2a:	e00b      	b.n	8006b44 <UART_SetConfig+0x180>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	76fb      	strb	r3, [r7, #27]
 8006b30:	e089      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b32:	2302      	movs	r3, #2
 8006b34:	76fb      	strb	r3, [r7, #27]
 8006b36:	e086      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b38:	2304      	movs	r3, #4
 8006b3a:	76fb      	strb	r3, [r7, #27]
 8006b3c:	e083      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b3e:	2308      	movs	r3, #8
 8006b40:	76fb      	strb	r3, [r7, #27]
 8006b42:	e080      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b44:	2310      	movs	r3, #16
 8006b46:	76fb      	strb	r3, [r7, #27]
 8006b48:	e07d      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a5b      	ldr	r2, [pc, #364]	; (8006cbc <UART_SetConfig+0x2f8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d120      	bne.n	8006b96 <UART_SetConfig+0x1d2>
 8006b54:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b60:	d013      	beq.n	8006b8a <UART_SetConfig+0x1c6>
 8006b62:	2bc0      	cmp	r3, #192	; 0xc0
 8006b64:	d814      	bhi.n	8006b90 <UART_SetConfig+0x1cc>
 8006b66:	2b80      	cmp	r3, #128	; 0x80
 8006b68:	d009      	beq.n	8006b7e <UART_SetConfig+0x1ba>
 8006b6a:	2b80      	cmp	r3, #128	; 0x80
 8006b6c:	d810      	bhi.n	8006b90 <UART_SetConfig+0x1cc>
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d002      	beq.n	8006b78 <UART_SetConfig+0x1b4>
 8006b72:	2b40      	cmp	r3, #64	; 0x40
 8006b74:	d006      	beq.n	8006b84 <UART_SetConfig+0x1c0>
 8006b76:	e00b      	b.n	8006b90 <UART_SetConfig+0x1cc>
 8006b78:	2300      	movs	r3, #0
 8006b7a:	76fb      	strb	r3, [r7, #27]
 8006b7c:	e063      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	76fb      	strb	r3, [r7, #27]
 8006b82:	e060      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b84:	2304      	movs	r3, #4
 8006b86:	76fb      	strb	r3, [r7, #27]
 8006b88:	e05d      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	76fb      	strb	r3, [r7, #27]
 8006b8e:	e05a      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b90:	2310      	movs	r3, #16
 8006b92:	76fb      	strb	r3, [r7, #27]
 8006b94:	e057      	b.n	8006c46 <UART_SetConfig+0x282>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a49      	ldr	r2, [pc, #292]	; (8006cc0 <UART_SetConfig+0x2fc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d125      	bne.n	8006bec <UART_SetConfig+0x228>
 8006ba0:	4b43      	ldr	r3, [pc, #268]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bae:	d017      	beq.n	8006be0 <UART_SetConfig+0x21c>
 8006bb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bb4:	d817      	bhi.n	8006be6 <UART_SetConfig+0x222>
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bba:	d00b      	beq.n	8006bd4 <UART_SetConfig+0x210>
 8006bbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bc0:	d811      	bhi.n	8006be6 <UART_SetConfig+0x222>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d003      	beq.n	8006bce <UART_SetConfig+0x20a>
 8006bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bca:	d006      	beq.n	8006bda <UART_SetConfig+0x216>
 8006bcc:	e00b      	b.n	8006be6 <UART_SetConfig+0x222>
 8006bce:	2300      	movs	r3, #0
 8006bd0:	76fb      	strb	r3, [r7, #27]
 8006bd2:	e038      	b.n	8006c46 <UART_SetConfig+0x282>
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	76fb      	strb	r3, [r7, #27]
 8006bd8:	e035      	b.n	8006c46 <UART_SetConfig+0x282>
 8006bda:	2304      	movs	r3, #4
 8006bdc:	76fb      	strb	r3, [r7, #27]
 8006bde:	e032      	b.n	8006c46 <UART_SetConfig+0x282>
 8006be0:	2308      	movs	r3, #8
 8006be2:	76fb      	strb	r3, [r7, #27]
 8006be4:	e02f      	b.n	8006c46 <UART_SetConfig+0x282>
 8006be6:	2310      	movs	r3, #16
 8006be8:	76fb      	strb	r3, [r7, #27]
 8006bea:	e02c      	b.n	8006c46 <UART_SetConfig+0x282>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2d      	ldr	r2, [pc, #180]	; (8006ca8 <UART_SetConfig+0x2e4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d125      	bne.n	8006c42 <UART_SetConfig+0x27e>
 8006bf6:	4b2e      	ldr	r3, [pc, #184]	; (8006cb0 <UART_SetConfig+0x2ec>)
 8006bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c04:	d017      	beq.n	8006c36 <UART_SetConfig+0x272>
 8006c06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c0a:	d817      	bhi.n	8006c3c <UART_SetConfig+0x278>
 8006c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c10:	d00b      	beq.n	8006c2a <UART_SetConfig+0x266>
 8006c12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c16:	d811      	bhi.n	8006c3c <UART_SetConfig+0x278>
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d003      	beq.n	8006c24 <UART_SetConfig+0x260>
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d006      	beq.n	8006c30 <UART_SetConfig+0x26c>
 8006c22:	e00b      	b.n	8006c3c <UART_SetConfig+0x278>
 8006c24:	2300      	movs	r3, #0
 8006c26:	76fb      	strb	r3, [r7, #27]
 8006c28:	e00d      	b.n	8006c46 <UART_SetConfig+0x282>
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	76fb      	strb	r3, [r7, #27]
 8006c2e:	e00a      	b.n	8006c46 <UART_SetConfig+0x282>
 8006c30:	2304      	movs	r3, #4
 8006c32:	76fb      	strb	r3, [r7, #27]
 8006c34:	e007      	b.n	8006c46 <UART_SetConfig+0x282>
 8006c36:	2308      	movs	r3, #8
 8006c38:	76fb      	strb	r3, [r7, #27]
 8006c3a:	e004      	b.n	8006c46 <UART_SetConfig+0x282>
 8006c3c:	2310      	movs	r3, #16
 8006c3e:	76fb      	strb	r3, [r7, #27]
 8006c40:	e001      	b.n	8006c46 <UART_SetConfig+0x282>
 8006c42:	2310      	movs	r3, #16
 8006c44:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a17      	ldr	r2, [pc, #92]	; (8006ca8 <UART_SetConfig+0x2e4>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	f040 8087 	bne.w	8006d60 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c52:	7efb      	ldrb	r3, [r7, #27]
 8006c54:	2b08      	cmp	r3, #8
 8006c56:	d837      	bhi.n	8006cc8 <UART_SetConfig+0x304>
 8006c58:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <UART_SetConfig+0x29c>)
 8006c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5e:	bf00      	nop
 8006c60:	08006c85 	.word	0x08006c85
 8006c64:	08006cc9 	.word	0x08006cc9
 8006c68:	08006c8d 	.word	0x08006c8d
 8006c6c:	08006cc9 	.word	0x08006cc9
 8006c70:	08006c93 	.word	0x08006c93
 8006c74:	08006cc9 	.word	0x08006cc9
 8006c78:	08006cc9 	.word	0x08006cc9
 8006c7c:	08006cc9 	.word	0x08006cc9
 8006c80:	08006c9b 	.word	0x08006c9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c84:	f7fd fe5c 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8006c88:	6178      	str	r0, [r7, #20]
        break;
 8006c8a:	e022      	b.n	8006cd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c8c:	4b0d      	ldr	r3, [pc, #52]	; (8006cc4 <UART_SetConfig+0x300>)
 8006c8e:	617b      	str	r3, [r7, #20]
        break;
 8006c90:	e01f      	b.n	8006cd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c92:	f7fd fdbd 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006c96:	6178      	str	r0, [r7, #20]
        break;
 8006c98:	e01b      	b.n	8006cd2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c9e:	617b      	str	r3, [r7, #20]
        break;
 8006ca0:	e017      	b.n	8006cd2 <UART_SetConfig+0x30e>
 8006ca2:	bf00      	nop
 8006ca4:	efff69f3 	.word	0xefff69f3
 8006ca8:	40008000 	.word	0x40008000
 8006cac:	40013800 	.word	0x40013800
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	40004400 	.word	0x40004400
 8006cb8:	40004800 	.word	0x40004800
 8006cbc:	40004c00 	.word	0x40004c00
 8006cc0:	40005000 	.word	0x40005000
 8006cc4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	76bb      	strb	r3, [r7, #26]
        break;
 8006cd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 80f1 	beq.w	8006ebc <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4613      	mov	r3, r2
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	4413      	add	r3, r2
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d305      	bcc.n	8006cf6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d902      	bls.n	8006cfc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	76bb      	strb	r3, [r7, #26]
 8006cfa:	e0df      	b.n	8006ebc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f04f 0100 	mov.w	r1, #0
 8006d04:	f04f 0200 	mov.w	r2, #0
 8006d08:	f04f 0300 	mov.w	r3, #0
 8006d0c:	020b      	lsls	r3, r1, #8
 8006d0e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d12:	0202      	lsls	r2, r0, #8
 8006d14:	6879      	ldr	r1, [r7, #4]
 8006d16:	6849      	ldr	r1, [r1, #4]
 8006d18:	0849      	lsrs	r1, r1, #1
 8006d1a:	4608      	mov	r0, r1
 8006d1c:	f04f 0100 	mov.w	r1, #0
 8006d20:	1814      	adds	r4, r2, r0
 8006d22:	eb43 0501 	adc.w	r5, r3, r1
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	4620      	mov	r0, r4
 8006d32:	4629      	mov	r1, r5
 8006d34:	f7f9 fee6 	bl	8000b04 <__aeabi_uldivmod>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	460b      	mov	r3, r1
 8006d3c:	4613      	mov	r3, r2
 8006d3e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d46:	d308      	bcc.n	8006d5a <UART_SetConfig+0x396>
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d4e:	d204      	bcs.n	8006d5a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	60da      	str	r2, [r3, #12]
 8006d58:	e0b0      	b.n	8006ebc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	76bb      	strb	r3, [r7, #26]
 8006d5e:	e0ad      	b.n	8006ebc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d68:	d15c      	bne.n	8006e24 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8006d6a:	7efb      	ldrb	r3, [r7, #27]
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d828      	bhi.n	8006dc2 <UART_SetConfig+0x3fe>
 8006d70:	a201      	add	r2, pc, #4	; (adr r2, 8006d78 <UART_SetConfig+0x3b4>)
 8006d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d76:	bf00      	nop
 8006d78:	08006d9d 	.word	0x08006d9d
 8006d7c:	08006da5 	.word	0x08006da5
 8006d80:	08006dad 	.word	0x08006dad
 8006d84:	08006dc3 	.word	0x08006dc3
 8006d88:	08006db3 	.word	0x08006db3
 8006d8c:	08006dc3 	.word	0x08006dc3
 8006d90:	08006dc3 	.word	0x08006dc3
 8006d94:	08006dc3 	.word	0x08006dc3
 8006d98:	08006dbb 	.word	0x08006dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fd fdd0 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8006da0:	6178      	str	r0, [r7, #20]
        break;
 8006da2:	e013      	b.n	8006dcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006da4:	f7fd fde2 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 8006da8:	6178      	str	r0, [r7, #20]
        break;
 8006daa:	e00f      	b.n	8006dcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dac:	4b49      	ldr	r3, [pc, #292]	; (8006ed4 <UART_SetConfig+0x510>)
 8006dae:	617b      	str	r3, [r7, #20]
        break;
 8006db0:	e00c      	b.n	8006dcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006db2:	f7fd fd2d 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006db6:	6178      	str	r0, [r7, #20]
        break;
 8006db8:	e008      	b.n	8006dcc <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dbe:	617b      	str	r3, [r7, #20]
        break;
 8006dc0:	e004      	b.n	8006dcc <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	76bb      	strb	r3, [r7, #26]
        break;
 8006dca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d074      	beq.n	8006ebc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	005a      	lsls	r2, r3, #1
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	2b0f      	cmp	r3, #15
 8006dee:	d916      	bls.n	8006e1e <UART_SetConfig+0x45a>
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df6:	d212      	bcs.n	8006e1e <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f023 030f 	bic.w	r3, r3, #15
 8006e00:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	085b      	lsrs	r3, r3, #1
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	89fb      	ldrh	r3, [r7, #14]
 8006e10:	4313      	orrs	r3, r2
 8006e12:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	89fa      	ldrh	r2, [r7, #14]
 8006e1a:	60da      	str	r2, [r3, #12]
 8006e1c:	e04e      	b.n	8006ebc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	76bb      	strb	r3, [r7, #26]
 8006e22:	e04b      	b.n	8006ebc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e24:	7efb      	ldrb	r3, [r7, #27]
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d827      	bhi.n	8006e7a <UART_SetConfig+0x4b6>
 8006e2a:	a201      	add	r2, pc, #4	; (adr r2, 8006e30 <UART_SetConfig+0x46c>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e55 	.word	0x08006e55
 8006e34:	08006e5d 	.word	0x08006e5d
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e7b 	.word	0x08006e7b
 8006e40:	08006e6b 	.word	0x08006e6b
 8006e44:	08006e7b 	.word	0x08006e7b
 8006e48:	08006e7b 	.word	0x08006e7b
 8006e4c:	08006e7b 	.word	0x08006e7b
 8006e50:	08006e73 	.word	0x08006e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e54:	f7fd fd74 	bl	8004940 <HAL_RCC_GetPCLK1Freq>
 8006e58:	6178      	str	r0, [r7, #20]
        break;
 8006e5a:	e013      	b.n	8006e84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e5c:	f7fd fd86 	bl	800496c <HAL_RCC_GetPCLK2Freq>
 8006e60:	6178      	str	r0, [r7, #20]
        break;
 8006e62:	e00f      	b.n	8006e84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e64:	4b1b      	ldr	r3, [pc, #108]	; (8006ed4 <UART_SetConfig+0x510>)
 8006e66:	617b      	str	r3, [r7, #20]
        break;
 8006e68:	e00c      	b.n	8006e84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6a:	f7fd fcd1 	bl	8004810 <HAL_RCC_GetSysClockFreq>
 8006e6e:	6178      	str	r0, [r7, #20]
        break;
 8006e70:	e008      	b.n	8006e84 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e76:	617b      	str	r3, [r7, #20]
        break;
 8006e78:	e004      	b.n	8006e84 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	76bb      	strb	r3, [r7, #26]
        break;
 8006e82:	bf00      	nop
    }

    if (pclk != 0U)
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d018      	beq.n	8006ebc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	085a      	lsrs	r2, r3, #1
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	441a      	add	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b0f      	cmp	r3, #15
 8006ea4:	d908      	bls.n	8006eb8 <UART_SetConfig+0x4f4>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eac:	d204      	bcs.n	8006eb8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	60da      	str	r2, [r3, #12]
 8006eb6:	e001      	b.n	8006ebc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb8:	2301      	movs	r3, #1
 8006eba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8006ec8:	7ebb      	ldrb	r3, [r7, #26]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3720      	adds	r7, #32
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8006ed2:	bf00      	nop
 8006ed4:	00f42400 	.word	0x00f42400

08006ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01a      	beq.n	8006fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd6:	d10a      	bne.n	8006fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af02      	add	r7, sp, #8
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800702a:	f7fb f81f 	bl	800206c <HAL_GetTick>
 800702e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0308 	and.w	r3, r3, #8
 800703a:	2b08      	cmp	r3, #8
 800703c:	d10e      	bne.n	800705c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800703e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 f82a 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e020      	b.n	800709e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0304 	and.w	r3, r3, #4
 8007066:	2b04      	cmp	r3, #4
 8007068:	d10e      	bne.n	8007088 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800706a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f814 	bl	80070a6 <UART_WaitOnFlagUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007084:	2303      	movs	r3, #3
 8007086:	e00a      	b.n	800709e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2220      	movs	r2, #32
 800708c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	60b9      	str	r1, [r7, #8]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	4613      	mov	r3, r2
 80070b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b6:	e05d      	b.n	8007174 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070be:	d059      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80070c0:	f7fa ffd4 	bl	800206c <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d302      	bcc.n	80070d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d11b      	bne.n	800710e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689a      	ldr	r2, [r3, #8]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0201 	bic.w	r2, r2, #1
 80070f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2220      	movs	r2, #32
 8007100:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800710a:	2303      	movs	r3, #3
 800710c:	e042      	b.n	8007194 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0304 	and.w	r3, r3, #4
 8007118:	2b00      	cmp	r3, #0
 800711a:	d02b      	beq.n	8007174 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007126:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800712a:	d123      	bne.n	8007174 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007134:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007144:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0201 	bic.w	r2, r2, #1
 8007154:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2220      	movs	r2, #32
 800715a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2220      	movs	r2, #32
 8007166:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e00f      	b.n	8007194 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69da      	ldr	r2, [r3, #28]
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	4013      	ands	r3, r2
 800717e:	68ba      	ldr	r2, [r7, #8]
 8007180:	429a      	cmp	r2, r3
 8007182:	bf0c      	ite	eq
 8007184:	2301      	moveq	r3, #1
 8007186:	2300      	movne	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	461a      	mov	r2, r3
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	429a      	cmp	r2, r3
 8007190:	d092      	beq.n	80070b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800719c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80071d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80071a0:	f7fa fcc8 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80071a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80071a6:	e003      	b.n	80071b0 <LoopCopyDataInit>

080071a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80071a8:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80071aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80071ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80071ae:	3104      	adds	r1, #4

080071b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80071b0:	480a      	ldr	r0, [pc, #40]	; (80071dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80071b2:	4b0b      	ldr	r3, [pc, #44]	; (80071e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80071b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80071b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80071b8:	d3f6      	bcc.n	80071a8 <CopyDataInit>
	ldr	r2, =_sbss
 80071ba:	4a0a      	ldr	r2, [pc, #40]	; (80071e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80071bc:	e002      	b.n	80071c4 <LoopFillZerobss>

080071be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80071be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80071c0:	f842 3b04 	str.w	r3, [r2], #4

080071c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80071c4:	4b08      	ldr	r3, [pc, #32]	; (80071e8 <LoopForever+0x16>)
	cmp	r2, r3
 80071c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80071c8:	d3f9      	bcc.n	80071be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80071ca:	f000 f817 	bl	80071fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80071ce:	f7f9 ffd5 	bl	800117c <main>

080071d2 <LoopForever>:

LoopForever:
    b LoopForever
 80071d2:	e7fe      	b.n	80071d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80071d4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80071d8:	080076a8 	.word	0x080076a8
	ldr	r0, =_sdata
 80071dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80071e0:	200000b0 	.word	0x200000b0
	ldr	r2, =_sbss
 80071e4:	200000b0 	.word	0x200000b0
	ldr	r3, = _ebss
 80071e8:	20000314 	.word	0x20000314

080071ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80071ec:	e7fe      	b.n	80071ec <ADC1_2_IRQHandler>
	...

080071f0 <__errno>:
 80071f0:	4b01      	ldr	r3, [pc, #4]	; (80071f8 <__errno+0x8>)
 80071f2:	6818      	ldr	r0, [r3, #0]
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20000048 	.word	0x20000048

080071fc <__libc_init_array>:
 80071fc:	b570      	push	{r4, r5, r6, lr}
 80071fe:	4d0d      	ldr	r5, [pc, #52]	; (8007234 <__libc_init_array+0x38>)
 8007200:	4c0d      	ldr	r4, [pc, #52]	; (8007238 <__libc_init_array+0x3c>)
 8007202:	1b64      	subs	r4, r4, r5
 8007204:	10a4      	asrs	r4, r4, #2
 8007206:	2600      	movs	r6, #0
 8007208:	42a6      	cmp	r6, r4
 800720a:	d109      	bne.n	8007220 <__libc_init_array+0x24>
 800720c:	4d0b      	ldr	r5, [pc, #44]	; (800723c <__libc_init_array+0x40>)
 800720e:	4c0c      	ldr	r4, [pc, #48]	; (8007240 <__libc_init_array+0x44>)
 8007210:	f000 f9f8 	bl	8007604 <_init>
 8007214:	1b64      	subs	r4, r4, r5
 8007216:	10a4      	asrs	r4, r4, #2
 8007218:	2600      	movs	r6, #0
 800721a:	42a6      	cmp	r6, r4
 800721c:	d105      	bne.n	800722a <__libc_init_array+0x2e>
 800721e:	bd70      	pop	{r4, r5, r6, pc}
 8007220:	f855 3b04 	ldr.w	r3, [r5], #4
 8007224:	4798      	blx	r3
 8007226:	3601      	adds	r6, #1
 8007228:	e7ee      	b.n	8007208 <__libc_init_array+0xc>
 800722a:	f855 3b04 	ldr.w	r3, [r5], #4
 800722e:	4798      	blx	r3
 8007230:	3601      	adds	r6, #1
 8007232:	e7f2      	b.n	800721a <__libc_init_array+0x1e>
 8007234:	080076a0 	.word	0x080076a0
 8007238:	080076a0 	.word	0x080076a0
 800723c:	080076a0 	.word	0x080076a0
 8007240:	080076a4 	.word	0x080076a4

08007244 <memset>:
 8007244:	4402      	add	r2, r0
 8007246:	4603      	mov	r3, r0
 8007248:	4293      	cmp	r3, r2
 800724a:	d100      	bne.n	800724e <memset+0xa>
 800724c:	4770      	bx	lr
 800724e:	f803 1b01 	strb.w	r1, [r3], #1
 8007252:	e7f9      	b.n	8007248 <memset+0x4>
 8007254:	0000      	movs	r0, r0
	...

08007258 <exp>:
 8007258:	b538      	push	{r3, r4, r5, lr}
 800725a:	ed2d 8b02 	vpush	{d8}
 800725e:	ec55 4b10 	vmov	r4, r5, d0
 8007262:	f000 f849 	bl	80072f8 <__ieee754_exp>
 8007266:	4b22      	ldr	r3, [pc, #136]	; (80072f0 <exp+0x98>)
 8007268:	eeb0 8a40 	vmov.f32	s16, s0
 800726c:	eef0 8a60 	vmov.f32	s17, s1
 8007270:	f993 3000 	ldrsb.w	r3, [r3]
 8007274:	3301      	adds	r3, #1
 8007276:	d012      	beq.n	800729e <exp+0x46>
 8007278:	ec45 4b10 	vmov	d0, r4, r5
 800727c:	f000 f9b6 	bl	80075ec <finite>
 8007280:	b168      	cbz	r0, 800729e <exp+0x46>
 8007282:	a313      	add	r3, pc, #76	; (adr r3, 80072d0 <exp+0x78>)
 8007284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007288:	4620      	mov	r0, r4
 800728a:	4629      	mov	r1, r5
 800728c:	f7f9 fbe8 	bl	8000a60 <__aeabi_dcmpgt>
 8007290:	b160      	cbz	r0, 80072ac <exp+0x54>
 8007292:	f7ff ffad 	bl	80071f0 <__errno>
 8007296:	ed9f 8b10 	vldr	d8, [pc, #64]	; 80072d8 <exp+0x80>
 800729a:	2322      	movs	r3, #34	; 0x22
 800729c:	6003      	str	r3, [r0, #0]
 800729e:	eeb0 0a48 	vmov.f32	s0, s16
 80072a2:	eef0 0a68 	vmov.f32	s1, s17
 80072a6:	ecbd 8b02 	vpop	{d8}
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	a30c      	add	r3, pc, #48	; (adr r3, 80072e0 <exp+0x88>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	4620      	mov	r0, r4
 80072b4:	4629      	mov	r1, r5
 80072b6:	f7f9 fbb5 	bl	8000a24 <__aeabi_dcmplt>
 80072ba:	2800      	cmp	r0, #0
 80072bc:	d0ef      	beq.n	800729e <exp+0x46>
 80072be:	f7ff ff97 	bl	80071f0 <__errno>
 80072c2:	2322      	movs	r3, #34	; 0x22
 80072c4:	ed9f 8b08 	vldr	d8, [pc, #32]	; 80072e8 <exp+0x90>
 80072c8:	6003      	str	r3, [r0, #0]
 80072ca:	e7e8      	b.n	800729e <exp+0x46>
 80072cc:	f3af 8000 	nop.w
 80072d0:	fefa39ef 	.word	0xfefa39ef
 80072d4:	40862e42 	.word	0x40862e42
 80072d8:	00000000 	.word	0x00000000
 80072dc:	7ff00000 	.word	0x7ff00000
 80072e0:	d52d3051 	.word	0xd52d3051
 80072e4:	c0874910 	.word	0xc0874910
	...
 80072f0:	200000ac 	.word	0x200000ac
 80072f4:	00000000 	.word	0x00000000

080072f8 <__ieee754_exp>:
 80072f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072fc:	ec55 4b10 	vmov	r4, r5, d0
 8007300:	49b1      	ldr	r1, [pc, #708]	; (80075c8 <__ieee754_exp+0x2d0>)
 8007302:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007306:	428b      	cmp	r3, r1
 8007308:	ed2d 8b04 	vpush	{d8-d9}
 800730c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8007310:	d937      	bls.n	8007382 <__ieee754_exp+0x8a>
 8007312:	49ae      	ldr	r1, [pc, #696]	; (80075cc <__ieee754_exp+0x2d4>)
 8007314:	428b      	cmp	r3, r1
 8007316:	d916      	bls.n	8007346 <__ieee754_exp+0x4e>
 8007318:	ee10 3a10 	vmov	r3, s0
 800731c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8007320:	4313      	orrs	r3, r2
 8007322:	d009      	beq.n	8007338 <__ieee754_exp+0x40>
 8007324:	ee10 2a10 	vmov	r2, s0
 8007328:	462b      	mov	r3, r5
 800732a:	4620      	mov	r0, r4
 800732c:	4629      	mov	r1, r5
 800732e:	f7f8 ff51 	bl	80001d4 <__adddf3>
 8007332:	4604      	mov	r4, r0
 8007334:	460d      	mov	r5, r1
 8007336:	e000      	b.n	800733a <__ieee754_exp+0x42>
 8007338:	bb06      	cbnz	r6, 800737c <__ieee754_exp+0x84>
 800733a:	ecbd 8b04 	vpop	{d8-d9}
 800733e:	ec45 4b10 	vmov	d0, r4, r5
 8007342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007346:	a38a      	add	r3, pc, #552	; (adr r3, 8007570 <__ieee754_exp+0x278>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	ee10 0a10 	vmov	r0, s0
 8007350:	4629      	mov	r1, r5
 8007352:	f7f9 fb85 	bl	8000a60 <__aeabi_dcmpgt>
 8007356:	b138      	cbz	r0, 8007368 <__ieee754_exp+0x70>
 8007358:	a387      	add	r3, pc, #540	; (adr r3, 8007578 <__ieee754_exp+0x280>)
 800735a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735e:	4610      	mov	r0, r2
 8007360:	4619      	mov	r1, r3
 8007362:	f7f9 f8ed 	bl	8000540 <__aeabi_dmul>
 8007366:	e7e4      	b.n	8007332 <__ieee754_exp+0x3a>
 8007368:	a385      	add	r3, pc, #532	; (adr r3, 8007580 <__ieee754_exp+0x288>)
 800736a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736e:	4620      	mov	r0, r4
 8007370:	4629      	mov	r1, r5
 8007372:	f7f9 fb57 	bl	8000a24 <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	f000 8087 	beq.w	800748a <__ieee754_exp+0x192>
 800737c:	2400      	movs	r4, #0
 800737e:	2500      	movs	r5, #0
 8007380:	e7db      	b.n	800733a <__ieee754_exp+0x42>
 8007382:	4a93      	ldr	r2, [pc, #588]	; (80075d0 <__ieee754_exp+0x2d8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	f240 80ac 	bls.w	80074e2 <__ieee754_exp+0x1ea>
 800738a:	4a92      	ldr	r2, [pc, #584]	; (80075d4 <__ieee754_exp+0x2dc>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d87c      	bhi.n	800748a <__ieee754_exp+0x192>
 8007390:	4b91      	ldr	r3, [pc, #580]	; (80075d8 <__ieee754_exp+0x2e0>)
 8007392:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739a:	ee10 0a10 	vmov	r0, s0
 800739e:	4629      	mov	r1, r5
 80073a0:	f7f8 ff16 	bl	80001d0 <__aeabi_dsub>
 80073a4:	4b8d      	ldr	r3, [pc, #564]	; (80075dc <__ieee754_exp+0x2e4>)
 80073a6:	00f7      	lsls	r7, r6, #3
 80073a8:	443b      	add	r3, r7
 80073aa:	ed93 7b00 	vldr	d7, [r3]
 80073ae:	f1c6 0a01 	rsb	sl, r6, #1
 80073b2:	4680      	mov	r8, r0
 80073b4:	4689      	mov	r9, r1
 80073b6:	ebaa 0a06 	sub.w	sl, sl, r6
 80073ba:	eeb0 8a47 	vmov.f32	s16, s14
 80073be:	eef0 8a67 	vmov.f32	s17, s15
 80073c2:	ec53 2b18 	vmov	r2, r3, d8
 80073c6:	4640      	mov	r0, r8
 80073c8:	4649      	mov	r1, r9
 80073ca:	f7f8 ff01 	bl	80001d0 <__aeabi_dsub>
 80073ce:	4604      	mov	r4, r0
 80073d0:	460d      	mov	r5, r1
 80073d2:	4622      	mov	r2, r4
 80073d4:	462b      	mov	r3, r5
 80073d6:	4620      	mov	r0, r4
 80073d8:	4629      	mov	r1, r5
 80073da:	f7f9 f8b1 	bl	8000540 <__aeabi_dmul>
 80073de:	a36a      	add	r3, pc, #424	; (adr r3, 8007588 <__ieee754_exp+0x290>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	4606      	mov	r6, r0
 80073e6:	460f      	mov	r7, r1
 80073e8:	f7f9 f8aa 	bl	8000540 <__aeabi_dmul>
 80073ec:	a368      	add	r3, pc, #416	; (adr r3, 8007590 <__ieee754_exp+0x298>)
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f7f8 feed 	bl	80001d0 <__aeabi_dsub>
 80073f6:	4632      	mov	r2, r6
 80073f8:	463b      	mov	r3, r7
 80073fa:	f7f9 f8a1 	bl	8000540 <__aeabi_dmul>
 80073fe:	a366      	add	r3, pc, #408	; (adr r3, 8007598 <__ieee754_exp+0x2a0>)
 8007400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007404:	f7f8 fee6 	bl	80001d4 <__adddf3>
 8007408:	4632      	mov	r2, r6
 800740a:	463b      	mov	r3, r7
 800740c:	f7f9 f898 	bl	8000540 <__aeabi_dmul>
 8007410:	a363      	add	r3, pc, #396	; (adr r3, 80075a0 <__ieee754_exp+0x2a8>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 fedb 	bl	80001d0 <__aeabi_dsub>
 800741a:	4632      	mov	r2, r6
 800741c:	463b      	mov	r3, r7
 800741e:	f7f9 f88f 	bl	8000540 <__aeabi_dmul>
 8007422:	a361      	add	r3, pc, #388	; (adr r3, 80075a8 <__ieee754_exp+0x2b0>)
 8007424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007428:	f7f8 fed4 	bl	80001d4 <__adddf3>
 800742c:	4632      	mov	r2, r6
 800742e:	463b      	mov	r3, r7
 8007430:	f7f9 f886 	bl	8000540 <__aeabi_dmul>
 8007434:	4602      	mov	r2, r0
 8007436:	460b      	mov	r3, r1
 8007438:	4620      	mov	r0, r4
 800743a:	4629      	mov	r1, r5
 800743c:	f7f8 fec8 	bl	80001d0 <__aeabi_dsub>
 8007440:	4602      	mov	r2, r0
 8007442:	460b      	mov	r3, r1
 8007444:	4606      	mov	r6, r0
 8007446:	460f      	mov	r7, r1
 8007448:	4620      	mov	r0, r4
 800744a:	4629      	mov	r1, r5
 800744c:	f7f9 f878 	bl	8000540 <__aeabi_dmul>
 8007450:	ec41 0b19 	vmov	d9, r0, r1
 8007454:	f1ba 0f00 	cmp.w	sl, #0
 8007458:	d15d      	bne.n	8007516 <__ieee754_exp+0x21e>
 800745a:	2200      	movs	r2, #0
 800745c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f8 feb4 	bl	80001d0 <__aeabi_dsub>
 8007468:	4602      	mov	r2, r0
 800746a:	460b      	mov	r3, r1
 800746c:	ec51 0b19 	vmov	r0, r1, d9
 8007470:	f7f9 f990 	bl	8000794 <__aeabi_ddiv>
 8007474:	4622      	mov	r2, r4
 8007476:	462b      	mov	r3, r5
 8007478:	f7f8 feaa 	bl	80001d0 <__aeabi_dsub>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	2000      	movs	r0, #0
 8007482:	4957      	ldr	r1, [pc, #348]	; (80075e0 <__ieee754_exp+0x2e8>)
 8007484:	f7f8 fea4 	bl	80001d0 <__aeabi_dsub>
 8007488:	e753      	b.n	8007332 <__ieee754_exp+0x3a>
 800748a:	4856      	ldr	r0, [pc, #344]	; (80075e4 <__ieee754_exp+0x2ec>)
 800748c:	a348      	add	r3, pc, #288	; (adr r3, 80075b0 <__ieee754_exp+0x2b8>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8007496:	4629      	mov	r1, r5
 8007498:	4620      	mov	r0, r4
 800749a:	f7f9 f851 	bl	8000540 <__aeabi_dmul>
 800749e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80074a2:	f7f8 fe97 	bl	80001d4 <__adddf3>
 80074a6:	f7f9 fae5 	bl	8000a74 <__aeabi_d2iz>
 80074aa:	4682      	mov	sl, r0
 80074ac:	f7f8 ffde 	bl	800046c <__aeabi_i2d>
 80074b0:	a341      	add	r3, pc, #260	; (adr r3, 80075b8 <__ieee754_exp+0x2c0>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	4606      	mov	r6, r0
 80074b8:	460f      	mov	r7, r1
 80074ba:	f7f9 f841 	bl	8000540 <__aeabi_dmul>
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4620      	mov	r0, r4
 80074c4:	4629      	mov	r1, r5
 80074c6:	f7f8 fe83 	bl	80001d0 <__aeabi_dsub>
 80074ca:	a33d      	add	r3, pc, #244	; (adr r3, 80075c0 <__ieee754_exp+0x2c8>)
 80074cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d0:	4680      	mov	r8, r0
 80074d2:	4689      	mov	r9, r1
 80074d4:	4630      	mov	r0, r6
 80074d6:	4639      	mov	r1, r7
 80074d8:	f7f9 f832 	bl	8000540 <__aeabi_dmul>
 80074dc:	ec41 0b18 	vmov	d8, r0, r1
 80074e0:	e76f      	b.n	80073c2 <__ieee754_exp+0xca>
 80074e2:	4a41      	ldr	r2, [pc, #260]	; (80075e8 <__ieee754_exp+0x2f0>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d811      	bhi.n	800750c <__ieee754_exp+0x214>
 80074e8:	a323      	add	r3, pc, #140	; (adr r3, 8007578 <__ieee754_exp+0x280>)
 80074ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ee:	ee10 0a10 	vmov	r0, s0
 80074f2:	4629      	mov	r1, r5
 80074f4:	f7f8 fe6e 	bl	80001d4 <__adddf3>
 80074f8:	4b39      	ldr	r3, [pc, #228]	; (80075e0 <__ieee754_exp+0x2e8>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	f7f9 fab0 	bl	8000a60 <__aeabi_dcmpgt>
 8007500:	b138      	cbz	r0, 8007512 <__ieee754_exp+0x21a>
 8007502:	4b37      	ldr	r3, [pc, #220]	; (80075e0 <__ieee754_exp+0x2e8>)
 8007504:	2200      	movs	r2, #0
 8007506:	4620      	mov	r0, r4
 8007508:	4629      	mov	r1, r5
 800750a:	e710      	b.n	800732e <__ieee754_exp+0x36>
 800750c:	f04f 0a00 	mov.w	sl, #0
 8007510:	e75f      	b.n	80073d2 <__ieee754_exp+0xda>
 8007512:	4682      	mov	sl, r0
 8007514:	e75d      	b.n	80073d2 <__ieee754_exp+0xda>
 8007516:	4632      	mov	r2, r6
 8007518:	463b      	mov	r3, r7
 800751a:	2000      	movs	r0, #0
 800751c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007520:	f7f8 fe56 	bl	80001d0 <__aeabi_dsub>
 8007524:	4602      	mov	r2, r0
 8007526:	460b      	mov	r3, r1
 8007528:	ec51 0b19 	vmov	r0, r1, d9
 800752c:	f7f9 f932 	bl	8000794 <__aeabi_ddiv>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	ec51 0b18 	vmov	r0, r1, d8
 8007538:	f7f8 fe4a 	bl	80001d0 <__aeabi_dsub>
 800753c:	4642      	mov	r2, r8
 800753e:	464b      	mov	r3, r9
 8007540:	f7f8 fe46 	bl	80001d0 <__aeabi_dsub>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	2000      	movs	r0, #0
 800754a:	4925      	ldr	r1, [pc, #148]	; (80075e0 <__ieee754_exp+0x2e8>)
 800754c:	f7f8 fe40 	bl	80001d0 <__aeabi_dsub>
 8007550:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8007554:	4592      	cmp	sl, r2
 8007556:	db02      	blt.n	800755e <__ieee754_exp+0x266>
 8007558:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800755c:	e6e9      	b.n	8007332 <__ieee754_exp+0x3a>
 800755e:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8007562:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8007566:	2200      	movs	r2, #0
 8007568:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800756c:	e6f9      	b.n	8007362 <__ieee754_exp+0x6a>
 800756e:	bf00      	nop
 8007570:	fefa39ef 	.word	0xfefa39ef
 8007574:	40862e42 	.word	0x40862e42
 8007578:	8800759c 	.word	0x8800759c
 800757c:	7e37e43c 	.word	0x7e37e43c
 8007580:	d52d3051 	.word	0xd52d3051
 8007584:	c0874910 	.word	0xc0874910
 8007588:	72bea4d0 	.word	0x72bea4d0
 800758c:	3e663769 	.word	0x3e663769
 8007590:	c5d26bf1 	.word	0xc5d26bf1
 8007594:	3ebbbd41 	.word	0x3ebbbd41
 8007598:	af25de2c 	.word	0xaf25de2c
 800759c:	3f11566a 	.word	0x3f11566a
 80075a0:	16bebd93 	.word	0x16bebd93
 80075a4:	3f66c16c 	.word	0x3f66c16c
 80075a8:	5555553e 	.word	0x5555553e
 80075ac:	3fc55555 	.word	0x3fc55555
 80075b0:	652b82fe 	.word	0x652b82fe
 80075b4:	3ff71547 	.word	0x3ff71547
 80075b8:	fee00000 	.word	0xfee00000
 80075bc:	3fe62e42 	.word	0x3fe62e42
 80075c0:	35793c76 	.word	0x35793c76
 80075c4:	3dea39ef 	.word	0x3dea39ef
 80075c8:	40862e41 	.word	0x40862e41
 80075cc:	7fefffff 	.word	0x7fefffff
 80075d0:	3fd62e42 	.word	0x3fd62e42
 80075d4:	3ff0a2b1 	.word	0x3ff0a2b1
 80075d8:	08007678 	.word	0x08007678
 80075dc:	08007688 	.word	0x08007688
 80075e0:	3ff00000 	.word	0x3ff00000
 80075e4:	08007668 	.word	0x08007668
 80075e8:	3e2fffff 	.word	0x3e2fffff

080075ec <finite>:
 80075ec:	b082      	sub	sp, #8
 80075ee:	ed8d 0b00 	vstr	d0, [sp]
 80075f2:	9801      	ldr	r0, [sp, #4]
 80075f4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80075f8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80075fc:	0fc0      	lsrs	r0, r0, #31
 80075fe:	b002      	add	sp, #8
 8007600:	4770      	bx	lr
	...

08007604 <_init>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	bf00      	nop
 8007608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760a:	bc08      	pop	{r3}
 800760c:	469e      	mov	lr, r3
 800760e:	4770      	bx	lr

08007610 <_fini>:
 8007610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007612:	bf00      	nop
 8007614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007616:	bc08      	pop	{r3}
 8007618:	469e      	mov	lr, r3
 800761a:	4770      	bx	lr
